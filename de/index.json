[{"categories":null,"content":"Die hasOwnProperty - Methode von JavaScript wird verwendet, um zu prüfen, ob ein bestimmtes Objekt eine bestimmte Eigenschaft hat.\nDie von der Methode hasOwnProperty geprüfte Eigenschaft ist objekt intern, dh sie muss vom Benutzer definiert worden sein.\nWenn die an hasOwnProperty übergebene Eigenschaft für das Objekt vorhanden ist, gibt die Methode true zurück , andernfalls gibt sie false zurück .\nBeispiel 1:\nIn diesem Beispiel erstellen wir das Objekt person und fügen die Eigenschaft name hinzu , dann verwenden wir hasOwnProperty , um zu überprüfen, ob diese Eigenschaft Teil unseres Objekts ist.\n1var person = { 2 \u0026#34;name\u0026#34;: \u0026#34;Brian\u0026#34;, 3 \u0026#34;lastName\u0026#34;: \u0026#34;Scott\u0026#34; 4}; 5 6console.log( person.hasOwnProperty(\u0026#34;name\u0026#34;) ); Ausgabe:\n1true Beispiel 2:\nIn diesem Beispiel werden wir ein Objekt namens car deklarieren und ihm eine Eigenschaft namens doors zuweisen , sodass wir hasOwnProperty verwenden können , um diese Eigenschaft zu überprüfen.\n1var car = { 2 \u0026#34;doors\u0026#34;: 4, 3 \u0026#34;engine\u0026#34;: 2.0, 4 \u0026#34;color\u0026#34;: \u0026#34;black\u0026#34; 5}; 6 7var hasDoor = car.hasOwnProperty(\u0026#34;doors\u0026#34;); 8 9console.log(hasDoor); Ausgabe:\n1true Beispiel 3:\nHier werden wir den Eigenschaftsnamen unseres Objekts absichtlich falsch schreiben, sodass die Methode hasOwnProperty false zurückgibt .\n1var shoppingCart = { 2 \u0026#34;fruits\u0026#34;: true, 3 \u0026#34;bread\u0026#34;: false 4}; 5 6var hasFruits = shoppingCart.hasOwnProperty(\u0026#34;fruites\u0026#34;); 7 8console.log(hasFruits); Ausgabe:\n1false Warum ist es wichtig, die hasOwnProperty-Methode zu verwenden?\rSehen wir uns an, wie wichtig es ist, die hasOwnProperty-Methode zu verwenden , um zu prüfen, ob eine Eigenschaft in einem Objekt in JavaScript vorhanden ist.\nAlles in JavaScript ist ein Objekt.\rRichtig, jedes in JavaScript erstellte Element wird als Objekt betrachtet. Zahlen, Text Zeichenfolgen, Arrays und alle anderen JavaScript-Datentypen erben Eigenschaften von einem übergeordneten Objekt.\nBeispiel 1:\nDer numerische Datentyp in JavaScript wird als Objekt betrachtet.\n1var number = 10.22333; 2var otherNumber = number.toPrecision(3); 3 4console.log(otherNumber); Ausgabe:\n110.2 Beispiel 2:\nDer Datentyp string wird ebenfalls als Objekt betrachtet.\n1var name = \u0026#34;Peter Max\u0026#34;; 2var char = name.charAt(2); 3 4console.log(char); Ausgabe:\n1t Beispiel 3:\nSogar Arrays in JavaScript sind Objekte.\n1var cars = [\u0026#34;BMW\u0026#34;, \u0026#34;Audi\u0026#34;, \u0026#34;Aston Martin\u0026#34;]; 2 3var carIndexNumber = cars.indexOf(\u0026#34;BMW\u0026#34;); 4 5console.log(carIndexNumber); Ausgabe:\n10 In den vorherigen Beispielen erben alle Objekte Eigenschaften vom Hauptobjekt Object.\nDer in-Befehl in JavaScript\rNeue JavaScript-Programmierer verwenden normalerweise den Befehl in , um zu prüfen, ob eine Eigenschaft für ein bestimmtes Objekt vorhanden ist.\nBeispiel:\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if (\u0026#34;engine\u0026#34; in car) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} Ausgabe:\n1true Das Problem ist, dass der Befehl in umfassend ist. Es wird nach allen Eigenschaften des Objekts gesucht. Benutzerdefinierte Eigenschaften und Eigenschaften, die vom übergeordneten Objekt geerbt wurden, werden in die Prüfung einbezogen.\nDies kann zu einem Logikfehler führen, wenn der Programmierer einen Codeabschnitt nur dann ausführt, wenn eine Objekt Eigenschaft vorhanden ist.\nAber der Programmierer möchte eine Standardeigenschaft des Objekts überprüfen? Oder eine vom Benutzer erstellte Eigenschaft?\nBeispiel:\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if (\u0026#34;toString\u0026#34; in car) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} Ausgabe:\n1true Im vorherigen Beispiel gibt der Befehl in true zurück , das heißt, er geht davon aus, dass die Eigenschaft toString in unserem Objekt vorhanden ist, obwohl diese Eigenschaft nicht von uns deklariert wurde.\nDie Eigenschaft/Methode toString wird vom übergeordneten Objekt geerbt. Um diese Verwirrung zu vermeiden, verwenden Sie immer die hasOwnProperty- Methode .\nBeispiel:\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if ( car.hasOwnProperty(\u0026#34;toString\u0026#34;) ) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} Ausgabe:\n1false Jetzt war die Rückgabe der Wert false. Das liegt daran, dass die hasOwnProperty-Methode , wie wir bereits gesehen haben, nur nach benutzerdefinierten Eigenschaften sucht.\n","date":"25.02.2022","img":"","permalink":"/de/articles/javascript-hasownproperty/","series":null,"tags":["JavaScript"],"title":"Erfahren Sie, wie Sie die hasOwnProperty()-Methode von JavaScript verwenden"}]