[{"categories":null,"content":"El método hasOwnProperty de JavaScript se usa para verificar si un objeto dado tiene una propiedad específica.\nLa propiedad comprobada por el método hasOwnProperty es interna al objeto en cuestión, es decir, debe haber sido definida por el usuario.\nSi la propiedad pasada a hasOwnProperty existe en el objeto, el método devuelve true , de lo contrario, devuelve false .\nEjemplo 1:\nEn este ejemplo, creamos el objeto persona y agregamos la propiedad de nombre , luego usamos hasOwnProperty para verificar que esta propiedad es parte de nuestro objeto.\n1var person = { 2 \u0026#34;name\u0026#34;: \u0026#34;Brian\u0026#34;, 3 \u0026#34;lastName\u0026#34;: \u0026#34;Scott\u0026#34; 4}; 5 6console.log( person.hasOwnProperty(\u0026#34;name\u0026#34;) ); Salida:\n1true Ejemplo 2:\nEn este ejemplo, vamos a declarar un objeto llamado auto y asignarle una propiedad llamada puertas , por lo que podemos usar hasOwnProperty para verificar esta propiedad.\n1var car = { 2 \u0026#34;doors\u0026#34;: 4, 3 \u0026#34;engine\u0026#34;: 2.0, 4 \u0026#34;color\u0026#34;: \u0026#34;black\u0026#34; 5}; 6 7var hasDoor = car.hasOwnProperty(\u0026#34;doors\u0026#34;); 8 9console.log(hasDoor); Salida:\n1true Ejemplo 3:\nAquí escribiremos mal a propósito el nombre de la propiedad de nuestro objeto para que el método hasOwnProperty devuelva false .\n1var shoppingCart = { 2 \u0026#34;fruits\u0026#34;: true, 3 \u0026#34;bread\u0026#34;: false 4}; 5 6var hasFruits = shoppingCart.hasOwnProperty(\u0026#34;fruites\u0026#34;); 7 8console.log(hasFruits); Salida:\n1false ¿Por qué es importante usar el método hasOwnProperty?\rVeamos la importancia de usar el método hasOwnProperty para verificar si existe una propiedad dentro de un objeto en JavaScript.\nTodo en JavaScript es un objeto.\rAsí es, cualquier elemento creado en JavaScript se considera un objeto. Números, cadenas de texto, matrices y cualquier otro tipo de datos de JavaScript heredan propiedades de un objeto principal.\nEjemplo 1:\nEl tipo de datos numérico en JavaScript se considera un objeto.\n1var number = 10.22333; 2var otherNumber = number.toPrecision(3); 3 4console.log(otherNumber); Salida:\n110.2 Ejemplo 2:\nEl tipo de datos de cadena también se considera un objeto.\n1var name = \u0026#34;Peter Max\u0026#34;; 2var char = name.charAt(2); 3 4console.log(char); Salida:\n1t Ejemplo 3:\nIncluso las matrices en JavaScript son objetos.\n1var cars = [\u0026#34;BMW\u0026#34;, \u0026#34;Audi\u0026#34;, \u0026#34;Aston Martin\u0026#34;]; 2 3var carIndexNumber = cars.indexOf(\u0026#34;BMW\u0026#34;); 4 5console.log(carIndexNumber); Salida:\n10 En los ejemplos anteriores, todos los objetos heredan propiedades del objeto principal, Object.\nEl comando \u0026ldquo;in\u0026rdquo; en JavaScript\rLos nuevos programadores de JavaScript suelen utilizar el comando in para comprobar si existe una propiedad en un objeto determinado.\nEjemplo:\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if (\u0026#34;engine\u0026#34; in car) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} Salida:\n1true El problema es que el comando in es completo. Hará una búsqueda de todas las propiedades del objeto. Las propiedades creadas por el usuario y las propiedades heredadas del objeto principal se incluyen en la verificación.\nEsto puede causar un error lógico si el programador ejecuta un fragmento de código sólo si existe una propiedad de objeto.\n¿Pero el programador quiere verificar una propiedad predeterminada del objeto? ¿O una propiedad creada por el usuario?\nEjemplo:\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if (\u0026#34;toString\u0026#34; in car) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} Salida:\n1true En el ejemplo anterior, el comando in devuelve verdadero , es decir, asume que la propiedad toString existe en nuestro objeto, aunque esta propiedad no haya sido declarada por nosotros.\nLa propiedad/método toString se hereda del objeto principal. Para evitar esta confusión, utilice siempre el método hasOwnProperty .\nEjemplo:\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if ( car.hasOwnProperty(\u0026#34;toString\u0026#34;) ) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} Salida:\n1false Ahora el retorno fue el valor falso . Esto se debe a que, como vimos anteriormente, el método hasOwnProperty solo busca propiedades definidas por el usuario.\n","date":"Feb 25, 2022","img":"","permalink":"/es/articles/javascript-hasownproperty/","series":null,"tags":["JavaScript"],"title":"Aprenda a usar el método hasOwnProperty() de JavaScript"}]