[{"categories":null,"content":"jQuery tiene una función destinada solo a eliminar los elementos secundarios del interior de otro elemento. El método “empty()” se puede utilizar directamente en el objeto.\nConsidere el siguiente código HTML.\n1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;title\u0026gt;Lorem ipsum dolor sit amet\u0026lt;/title\u0026gt; 5\u0026lt;/head\u0026gt; 6\u0026lt;body\u0026gt; 7 \u0026lt;div id=\u0026#34;myDiv\u0026#34;\u0026gt; 8 \u0026lt;p\u0026gt;First paragraph\u0026lt;/p\u0026gt; 9 \u0026lt;p\u0026gt;Second paragraph\u0026lt;/p\u0026gt; 10 \u0026lt;p\u0026gt;Third paragraph\u0026lt;/p\u0026gt; 11 \u0026lt;p\u0026gt;Fourth paragraph\u0026lt;/p\u0026gt; 12 \u0026lt;/div\u0026gt; 13 \u0026lt;script src=\u0026#34;https://code.jquery.com/jquery-3.6.0.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 14\u0026lt;/body\u0026gt; 15\u0026lt;/html\u0026gt; Para eliminar todos los párrafos dentro del elemento \u0026ldquo;myDiv\u0026rdquo;, simplemente use el siguiente código en jQuery.\n1$(\u0026#34;#myDiv\u0026#34;).empty(); Pero, ¿cómo podemos realizar esta misma operación usando solo JavaScript?\nEliminación de elementos secundarios de un nodo DOM mediante JavaScript\rJavaScript permite al programador eliminar elementos de un nodo DOM a través de varias propiedades. Aprendamos cómo hacer esta eliminación usando cada uno de ellos.\ninnerHTML\rUna de estas propiedades es \u0026ldquo;innerHTML\u0026rdquo;. Permite reemplazar todo el HTML interno del elemento. Incluyendo ser reemplazado por una cadena vacía, haciendo que el elemento en cuestión esté vacío.\nPara eliminar todos los nodos secundarios dentro del elemento \u0026ldquo;myDiv\u0026rdquo;, use el siguiente JavaScript.\n1document.getElementById(\u0026#34;myDiv\u0026#34;).innerHTML = \u0026#34;\u0026#34;; A continuación puedes ver un ejemplo completo en HTML. Aquí usamos un botón para eliminar elementos.\n1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;title\u0026gt;Removing HTML elements using innerHTML\u0026lt;/title\u0026gt; 5 \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; 6\u0026lt;/head\u0026gt; 7\u0026lt;body\u0026gt; 8 \u0026lt;div id=\u0026#34;myDiv\u0026#34; style=\u0026#34;border: 3px dashed red; margin-bottom: 20px;\u0026#34;\u0026gt; 9 \u0026lt;p\u0026gt;First paragraph\u0026lt;/p\u0026gt; 10 \u0026lt;p\u0026gt;Second paragraph\u0026lt;/p\u0026gt; 11 \u0026lt;p\u0026gt;Third paragraph\u0026lt;/p\u0026gt; 12 \u0026lt;p\u0026gt;Fourth paragraph\u0026lt;/p\u0026gt; 13 \u0026lt;/div\u0026gt; 14 15 \u0026lt;button id=\u0026#39;removeElements\u0026#39;\u0026gt;Remove paragraphs (innerHTML)\u0026lt;/button\u0026gt; 16 17 \u0026lt;script\u0026gt; 18 const button = document.getElementById(\u0026#34;removeElements\u0026#34;); 19 button.onclick = function () { 20 document.getElementById(\u0026#34;myDiv\u0026#34;).innerHTML = \u0026#34;\u0026#34;; 21 }; 22 \u0026lt;/script\u0026gt; 23\u0026lt;/body\u0026gt; 24\u0026lt;/html\u0026gt; textContent\rLa propiedad \u0026ldquo;textContent\u0026rdquo; se puede usar para reemplazar todos los elementos dentro de un nodo con una cadena vacía.\nDependiendo del navegador, el uso de \u0026ldquo;textContent\u0026rdquo; puede funcionar mejor que \u0026ldquo;innerHTML\u0026rdquo;.\n1document.getElementById(\u0026#34;myDiv\u0026#34;).textContent = \u0026#34;\u0026#34;; Eliminar elementos secundarios usando un bucle (\u0026ldquo;lastChild\u0026rdquo;)\rEn el ejemplo a continuación, usamos el ciclo \u0026ldquo;while\u0026rdquo; para verificar si nuestro elemento contiene el primer elemento secundario. Si es verdadero, indica que hay al menos un elemento secundario dentro del elemento principal, por lo que el ciclo elimina el último elemento. Y se repite el proceso.\nLa eliminación del último elemento con la propiedad \u0026ldquo;lastChild\u0026rdquo; generalmente funciona mejor que la eliminación del primer elemento con la propiedad \u0026ldquo;firstChild\u0026rdquo;.\n1const element = document.getElementById(\u0026#34;myDiv\u0026#34;); 2while (element.firstChild) { 3 element.removeChild(element.lastChild); 4} Eliminar elementos secundarios usando un bucle (\u0026ldquo;lastElementChild\u0026rdquo;)\rAquí lograremos el mismo resultado, pero conservando los \u0026ldquo;no Elementos\u0026rdquo;, como los nodos de texto \u0026ldquo;#text\u0026rdquo; y los comentarios \u0026ldquo;\u0026lt;!\u0026ndash; comments \u0026ndash;\u0026gt;\u0026rdquo;.\n1const element = document.getElementById(\u0026#34;myDiv\u0026#34;); 2while (element.firstChild) { 3 element.removeChild(element.lastElementChild); 4} Otra característica de \u0026ldquo;lastElementChild\u0026rdquo; es preservar los nodos secundarios dentro del elemento principal que no son descendientes directos.\nPor ejemplo, considere la estructura de los elementos a continuación.\n1Parent element 2| 3 — First node 4| | 5| — Node 1 6| | 7| — Node 2 8| 9 — Second node Al usar \u0026ldquo;lastElementChild\u0026rdquo;, se eliminarían el \u0026ldquo;First node\u0026rdquo; y el \u0026ldquo;Second node\u0026rdquo;. El \u0026ldquo;Nodo 1\u0026rdquo; y el \u0026ldquo;Nodo 2\u0026rdquo; no se eliminarían.\nEliminar elementos secundarios con el método \u0026ldquo;remove\u0026rdquo;\r1const element = document.getElementById(\u0026#34;myDiv\u0026#34;); 2while (element.firstChild) { 3 element.lastChild.remove(); 4} La función \u0026ldquo;remove\u0026rdquo; se agregó en ES5. Tiene una sintaxis de encadenamiento más simple y directa. Ya cuenta con un excelente soporte en muchos navegadores\r.\nEliminar elementos con el método \u0026ldquo;replaceChildren\u0026rdquo;\rTambién existe la posibilidad de eliminar elementos secundarios de un nodo DOM utilizando la API \u0026ldquo;replaceChildren\u0026rdquo;. Este método le permite no solo eliminar elementos de un elemento principal, sino también reemplazarlos con otros elementos en una sola operación.\nPara simplemente eliminar los elementos secundarios, llame a la API sin ningún argumento.\n1const element = document.getElementById(\u0026#34;myDiv\u0026#34;); 2element.replaceChildren(); La API \u0026ldquo;replaceChildren\u0026rdquo; ya es compatible con los navegadores modernos\r.\n","date":"Mar 5, 2022","img":"","permalink":"https://w3source.org/es/articles/javascript-equivalent-to-jquery-empty/","series":null,"tags":["JavaScript","jQuery"],"title":"Código Vanilla JavaScript equivalente a jQuery.empty()"},{"categories":null,"content":"Muchos usuarios tienen dudas sobre cómo verificar si un elemento existe en el DOM de HTML usando jQuery. En pocas palabras, ¿cómo verificar si un elemento existe en la página de la manera más simple posible?\nHay varias formas que podemos utilizar para lograr este resultado. Una de ellas es comprobar si la propiedad “longitud” del selector de elementos devuelve un número mayor que 0.\nPor ejemplo, si tenemos un HTML similar al que se muestra a continuación.\n1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;title\u0026gt;Lorem ipsum dolor\u0026lt;/title\u0026gt; 5 \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; 6\u0026lt;/head\u0026gt; 7\u0026lt;body\u0026gt; 8 \u0026lt;div id=\u0026#34;myDiv\u0026#34;\u0026gt;Lorem ipsum dolor sit amet.\u0026lt;/div\u0026gt; 9\u0026lt;/body\u0026gt; 10\u0026lt;/html\u0026gt; Y queremos verificar si el elemento \u0026ldquo;myDiv\u0026rdquo; existe en el DOM, es decir, en la página podemos usar el siguiente código.\n1if ($(\u0026#34;#myDiv\u0026#34;).length \u0026gt; 0) { 2 console.log(\u0026#34;The element exists!\u0026#34;); 3} Simplificando el código\rDado que muchas cosas en JavaScript son verdaderas o falsas, el retorno de la propiedad \u0026ldquo;longitud\u0026rdquo; también puede considerarse verdadero o falso. El retorno es un número, 0 representa \u0026ldquo;falso\u0026rdquo; y todo lo demás representa \u0026ldquo;verdadero\u0026rdquo;.\nAsí que podemos simplificar el código de la siguiente manera.\n1if ($(\u0026#34;#myDiv\u0026#34;).length) { 2 console.log(\u0026#34;The element exists!\u0026#34;); 3} Incluso eliminando el comparativo “\u0026gt; 0”, el valor de retorno sigue siendo el mismo.\nCreando una función \u0026ldquo;existe\u0026rdquo; para jQuery\rPodemos ir un poco más allá y agregar una función llamada \u0026ldquo;existe\u0026rdquo;. Esta función se puede utilizar directamente con el elemento que queremos comprobar.\n1jQuery.fn.exists = function() { 2 return ( $(this).length \u0026gt; 0); 3} 4 5var elementExists = $(\u0026#34;#myDiv\u0026#34;).exists(); 6 7console.log(elementExists); Podemos mejorar aún más y evitar que el método represente una posibilidad de encadenamiento. Cosa que no es posible en este caso. Lo haremos de la siguiente manera.\n1jQuery.exists = function(selector) { 2 return ( $(selector).length \u0026gt; 0 ); 3} 4 5if ( $.exists(\u0026#34;#myDiv\u0026#34;) ) { 6 console.log(\u0026#34;The element exists!\u0026#34;); 7} Observe que ahora pasamos el selector como argumento a la función \u0026ldquo;existe\u0026rdquo;, en lugar de simular una cadena directamente desde el objeto.\nVerificando la existencia de un elemento HTML usando una matriz\rCuando usamos un selector en jQuery, devuelve una matriz de elementos. Si intentamos acceder al primer elemento de este arreglo y devuelve “indefinido”, indica que el elemento en cuestión no existe en el DOM.\n1if ( $(\u0026#39;#myDiv\u0026#39;)[0] ) { 2 console.log(\u0026#34;The element exists!\u0026#34;); 3} Como puede ver, hay varias formas de verificar la existencia de un elemento HTML en la página. ¿Qué es lo mejor? Bueno, el que soluciona tu problema. Lo importante es que su código se está ejecutando y funcionando.\n","date":"Mar 3, 2022","img":"","permalink":"https://w3source.org/es/articles/is-there-an-exists-function-for-jquery/","series":null,"tags":["JavaScript","jQuery"],"title":"¿Hay una función 'exists' en jQuery? (¿El elemento HTML existe?)"},{"categories":null,"content":"El método hasOwnProperty de JavaScript se usa para verificar si un objeto dado tiene una propiedad específica.\nLa propiedad comprobada por el método hasOwnProperty es interna al objeto en cuestión, es decir, debe haber sido definida por el usuario.\nSi la propiedad pasada a hasOwnProperty existe en el objeto, el método devuelve true , de lo contrario, devuelve false .\nEjemplo 1:\nEn este ejemplo, creamos el objeto persona y agregamos la propiedad de nombre , luego usamos hasOwnProperty para verificar que esta propiedad es parte de nuestro objeto.\n1var person = { 2 \u0026#34;name\u0026#34;: \u0026#34;Brian\u0026#34;, 3 \u0026#34;lastName\u0026#34;: \u0026#34;Scott\u0026#34; 4}; 5 6console.log( person.hasOwnProperty(\u0026#34;name\u0026#34;) ); Salida:\n1true Ejemplo 2:\nEn este ejemplo, vamos a declarar un objeto llamado auto y asignarle una propiedad llamada puertas , por lo que podemos usar hasOwnProperty para verificar esta propiedad.\n1var car = { 2 \u0026#34;doors\u0026#34;: 4, 3 \u0026#34;engine\u0026#34;: 2.0, 4 \u0026#34;color\u0026#34;: \u0026#34;black\u0026#34; 5}; 6 7var hasDoor = car.hasOwnProperty(\u0026#34;doors\u0026#34;); 8 9console.log(hasDoor); Salida:\n1true Ejemplo 3:\nAquí escribiremos mal a propósito el nombre de la propiedad de nuestro objeto para que el método hasOwnProperty devuelva false .\n1var shoppingCart = { 2 \u0026#34;fruits\u0026#34;: true, 3 \u0026#34;bread\u0026#34;: false 4}; 5 6var hasFruits = shoppingCart.hasOwnProperty(\u0026#34;fruites\u0026#34;); 7 8console.log(hasFruits); Salida:\n1false ¿Por qué es importante usar el método hasOwnProperty?\rVeamos la importancia de usar el método hasOwnProperty para verificar si existe una propiedad dentro de un objeto en JavaScript.\nTodo en JavaScript es un objeto.\rAsí es, cualquier elemento creado en JavaScript se considera un objeto. Números, cadenas de texto, matrices y cualquier otro tipo de datos de JavaScript heredan propiedades de un objeto principal.\nEjemplo 1:\nEl tipo de datos numérico en JavaScript se considera un objeto.\n1var number = 10.22333; 2var otherNumber = number.toPrecision(3); 3 4console.log(otherNumber); Salida:\n110.2 Ejemplo 2:\nEl tipo de datos de cadena también se considera un objeto.\n1var name = \u0026#34;Peter Max\u0026#34;; 2var char = name.charAt(2); 3 4console.log(char); Salida:\n1t Ejemplo 3:\nIncluso las matrices en JavaScript son objetos.\n1var cars = [\u0026#34;BMW\u0026#34;, \u0026#34;Audi\u0026#34;, \u0026#34;Aston Martin\u0026#34;]; 2 3var carIndexNumber = cars.indexOf(\u0026#34;BMW\u0026#34;); 4 5console.log(carIndexNumber); Salida:\n10 En los ejemplos anteriores, todos los objetos heredan propiedades del objeto principal, Object.\nEl comando \u0026ldquo;in\u0026rdquo; en JavaScript\rLos nuevos programadores de JavaScript suelen utilizar el comando in para comprobar si existe una propiedad en un objeto determinado.\nEjemplo:\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if (\u0026#34;engine\u0026#34; in car) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} Salida:\n1true El problema es que el comando in es completo. Hará una búsqueda de todas las propiedades del objeto. Las propiedades creadas por el usuario y las propiedades heredadas del objeto principal se incluyen en la verificación.\nEsto puede causar un error lógico si el programador ejecuta un fragmento de código sólo si existe una propiedad de objeto.\n¿Pero el programador quiere verificar una propiedad predeterminada del objeto? ¿O una propiedad creada por el usuario?\nEjemplo:\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if (\u0026#34;toString\u0026#34; in car) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} Salida:\n1true En el ejemplo anterior, el comando in devuelve verdadero , es decir, asume que la propiedad toString existe en nuestro objeto, aunque esta propiedad no haya sido declarada por nosotros.\nLa propiedad/método toString se hereda del objeto principal. Para evitar esta confusión, utilice siempre el método hasOwnProperty .\nEjemplo:\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if ( car.hasOwnProperty(\u0026#34;toString\u0026#34;) ) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} Salida:\n1false Ahora el retorno fue el valor falso . Esto se debe a que, como vimos anteriormente, el método hasOwnProperty solo busca propiedades definidas por el usuario.\n","date":"Feb 25, 2022","img":"","permalink":"https://w3source.org/es/articles/javascript-hasownproperty/","series":null,"tags":["JavaScript"],"title":"Aprenda a usar el método hasOwnProperty() de JavaScript"}]