[{"categories":null,"content":"De nombreux utilisateurs ont des doutes sur la façon de vérifier si un élément existe dans le DOM HTML à l\u0026rsquo;aide de jQuery. En quelques mots, comment vérifier si un élément existe sur la page de la manière la plus simple possible ?\nIl y a plusieurs façons que nous pouvons utiliser pour arriver à ce résultat. L\u0026rsquo;une d\u0026rsquo;elles consiste à vérifier si la propriété « length » du sélecteur d\u0026rsquo;élément renvoie un nombre supérieur à 0.\nPar exemple, si nous avons un code HTML similaire à celui présenté ci-dessous.\n1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;title\u0026gt;Lorem ipsum dolor\u0026lt;/title\u0026gt; 5 \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; 6\u0026lt;/head\u0026gt; 7\u0026lt;body\u0026gt; 8 \u0026lt;div id=\u0026#34;myDiv\u0026#34;\u0026gt;Lorem ipsum dolor sit amet.\u0026lt;/div\u0026gt; 9\u0026lt;/body\u0026gt; 10\u0026lt;/html\u0026gt; Et nous voulons vérifier si l\u0026rsquo;élément \u0026ldquo;myDiv\u0026rdquo; existe dans le DOM, c\u0026rsquo;est-à-dire que sur la page, nous pouvons utiliser le code suivant.\n1if ($(\u0026#34;#myDiv\u0026#34;).length \u0026gt; 0) { 2 console.log(\u0026#34;The element exists!\u0026#34;); 3} Simplifier le code\rÉtant donné que beaucoup de choses en JavaScript sont vraies ou fausses, le retour de la propriété \u0026ldquo;length\u0026rdquo; peut également être considéré comme vrai ou faux. Le retour est un nombre, 0 représente \u0026ldquo;faux\u0026rdquo; et tout le reste représente \u0026ldquo;vrai\u0026rdquo;.\nNous pouvons donc simplifier le code comme suit.\n1if ($(\u0026#34;#myDiv\u0026#34;).length) { 2 console.log(\u0026#34;The element exists!\u0026#34;); 3} Même en supprimant le comparatif \u0026ldquo;\u0026gt; 0\u0026rdquo;, la valeur de retour reste la même.\nCréation d\u0026rsquo;une fonction \u0026ldquo;existe\u0026rdquo; pour jQuery\rOn peut aller un peu plus loin et ajouter une fonction nommée \u0026ldquo;existe\u0026rdquo;. Cette fonction peut être utilisée directement avec l\u0026rsquo;élément que nous voulons vérifier.\n1jQuery.fn.exists = function() { 2 return ( $(this).length \u0026gt; 0); 3} 4 5var elementExists = $(\u0026#34;#myDiv\u0026#34;).exists(); 6 7console.log(elementExists); On peut encore s\u0026rsquo;améliorer et éviter que la méthode ne représente une possibilité d\u0026rsquo;enchaînement. Ce qui n\u0026rsquo;est pas possible dans ce cas. Nous le ferons comme suit.\n1jQuery.exists = function(selector) { 2 return ( $(selector).length \u0026gt; 0 ); 3} 4 5if ( $.exists(\u0026#34;#myDiv\u0026#34;) ) { 6 console.log(\u0026#34;The element exists!\u0026#34;); 7} Notez que nous passons maintenant le sélecteur comme argument à la fonction \u0026ldquo;existe\u0026rdquo;, au lieu de simuler une chaîne directement à partir de l\u0026rsquo;objet.\nVérification de l\u0026rsquo;existence d\u0026rsquo;un élément HTML à l\u0026rsquo;aide d\u0026rsquo;un tableau\rLorsque nous utilisons un sélecteur dans jQuery, il renvoie un tableau d\u0026rsquo;éléments. Si nous essayons d\u0026rsquo;accéder au premier élément de ce tableau et qu\u0026rsquo;il renvoie \u0026ldquo;undefined\u0026rdquo;, cela indique que l\u0026rsquo;élément en question n\u0026rsquo;existe pas dans le DOM.\n1if ( $(\u0026#39;#myDiv\u0026#39;)[0] ) { 2 console.log(\u0026#34;The element exists!\u0026#34;); 3} Comme vous pouvez le voir, il existe plusieurs façons de vérifier l\u0026rsquo;existence d\u0026rsquo;un élément HTML sur la page. Quel est le meilleur? Eh bien, celui qui résout votre problème. L\u0026rsquo;important est que votre code s\u0026rsquo;exécute et fonctionne.\n","date":"03/03/2022","img":"","permalink":"https://w3source.org/fr/articles/is-there-an-exists-function-for-jquery/","series":null,"tags":["JavaScript","jQuery"],"title":"Existe-t-il une fonction 'exists' dans jQuery ? (L'élément HTML existe-t-il ?)"},{"categories":null,"content":"La méthode hasOwnProperty de JavaScript est utilisée pour vérifier si un objet donné a une propriété spécifique.\nLa propriété vérifiée par la méthode hasOwnProperty est interne à l\u0026rsquo;objet en question, c\u0026rsquo;est-à-dire qu\u0026rsquo;elle doit avoir été définie par l\u0026rsquo;utilisateur.\nSi la propriété passée à hasOwnProperty existe sur l\u0026rsquo;objet, la méthode retourne true , sinon elle retourne false .\nExemple 1:\nDans cet exemple, nous créons l' objet person et ajoutons la propriété name , puis nous utilisons hasOwnProperty pour vérifier que cette propriété fait partie de notre objet.\n1var person = { 2 \u0026#34;name\u0026#34;: \u0026#34;Brian\u0026#34;, 3 \u0026#34;lastName\u0026#34;: \u0026#34;Scott\u0026#34; 4}; 5 6console.log( person.hasOwnProperty(\u0026#34;name\u0026#34;) ); Sortir:\n1true Exemple 2 :\nDans cet exemple, nous allons déclarer un objet nommé car et lui attribuer une propriété appelée portes , nous pouvons donc utiliser hasOwnProperty pour vérifier cette propriété.\n1var car = { 2 \u0026#34;doors\u0026#34;: 4, 3 \u0026#34;engine\u0026#34;: 2.0, 4 \u0026#34;color\u0026#34;: \u0026#34;black\u0026#34; 5}; 6 7var hasDoor = car.hasOwnProperty(\u0026#34;doors\u0026#34;); 8 9console.log(hasDoor); Sortir:\n1true Exemple 3 :\nIci, nous allons volontairement mal orthographier le nom de la propriété de notre objet afin que la méthode hasOwnProperty renvoie false .\n1var shoppingCart = { 2 \u0026#34;fruits\u0026#34;: true, 3 \u0026#34;bread\u0026#34;: false 4}; 5 6var hasFruits = shoppingCart.hasOwnProperty(\u0026#34;fruites\u0026#34;); 7 8console.log(hasFruits); Sortir:\n1false Pourquoi est-il important d\u0026rsquo;utiliser la méthode hasOwnProperty ?\rExaminons l\u0026rsquo;importance d\u0026rsquo;utiliser la méthode hasOwnProperty pour vérifier si une propriété existe dans un objet en JavaScript.\nTout en JavaScript est un objet.\rC\u0026rsquo;est vrai, tout élément créé en JavaScript est considéré comme un objet. Les nombres, les chaînes de texte, les tableaux et tout autre type de données JavaScript héritent des propriétés d\u0026rsquo;un objet parent.\nExemple 1:\nLe type de données numérique en JavaScript est considéré comme un objet.\n1var number = 10.22333; 2var otherNumber = number.toPrecision(3); 3 4console.log(otherNumber); Sortir:\n110.2 Exemple 2 :\nLe type de données chaîne est également considéré comme un objet.\n1var name = \u0026#34;Peter Max\u0026#34;; 2var char = name.charAt(2); 3 4console.log(char); Sortir:\n1t Exemple 3 :\nMême les tableaux en JavaScript sont des objets.\n1var cars = [\u0026#34;BMW\u0026#34;, \u0026#34;Audi\u0026#34;, \u0026#34;Aston Martin\u0026#34;]; 2 3var carIndexNumber = cars.indexOf(\u0026#34;BMW\u0026#34;); 4 5console.log(carIndexNumber); Sortir:\n10 Dans les exemples précédents, tous les objets héritent des propriétés de l\u0026rsquo;objet principal, Object.\nLa commande \u0026ldquo;in\u0026rdquo; en JavaScript\rLes nouveaux programmeurs JavaScript utilisent généralement la commande in pour vérifier si une propriété existe sur un objet donné.\nExemple:\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if (\u0026#34;engine\u0026#34; in car) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} Sortir:\n1true Le problème est que la commande in est complète. Il effectuera une recherche de toutes les propriétés de l\u0026rsquo;objet. Les propriétés créées par l\u0026rsquo;utilisateur et les propriétés héritées de l\u0026rsquo;objet parent sont incluses dans la vérification.\nCela peut provoquer une erreur logique si le programmeur n\u0026rsquo;exécute un morceau de code que si une propriété d\u0026rsquo;objet existe.\nMais le programmeur veut vérifier une propriété par défaut de l\u0026rsquo;objet ? Ou une propriété créée par l\u0026rsquo;utilisateur ?\nExemple:\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if (\u0026#34;toString\u0026#34; in car) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} Sortir:\n1true Dans l\u0026rsquo;exemple précédent, la commande in renvoie true , c\u0026rsquo;est-à-dire qu\u0026rsquo;elle suppose que la propriété toString existe dans notre objet, même si cette propriété n\u0026rsquo;a pas été déclarée par nous.\nLa propriété/méthode toString est héritée de l\u0026rsquo;objet parent. Pour éviter cette confusion, utilisez toujours la méthode hasOwnProperty .\nExemple:\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if ( car.hasOwnProperty(\u0026#34;toString\u0026#34;) ) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} Sortir:\n1false Maintenant, le retour était la valeur false . En effet, comme nous l\u0026rsquo;avons vu précédemment, la méthode hasOwnProperty recherche uniquement les propriétés définies par l\u0026rsquo;utilisateur.\n","date":"25/02/2022","img":"","permalink":"https://w3source.org/fr/articles/javascript-hasownproperty/","series":null,"tags":["JavaScript"],"title":"Apprenez à utiliser la méthode JavaScript hasOwnProperty()"}]