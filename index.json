[{"categories":null,"content":"JavaScript\u0026rsquo;s hasOwnProperty method is used to check if a given object has a specific property.\nThe property checked by the hasOwnProperty method is internal to the object in question, that is, it must have been defined by the user.\nIf the property passed to hasOwnProperty exists on the object, the method returns true, otherwise it returns false .\nExample 1:\nIn this example, we create a person object and add a name property, then we use the hasOwnProperty to verify that this property is part of our object.\n1var person = { 2 \u0026#34;name\u0026#34;: \u0026#34;Brian\u0026#34;, 3 \u0026#34;lastName\u0026#34;: \u0026#34;Scott\u0026#34; 4}; 5 6console.log( person.hasOwnProperty(\u0026#34;name\u0026#34;) ); Output:\n1true Example 2:\nIn this example, we are going to declare an object named car and assign it a property called doors, so we can use hasOwnProperty to check this property.\n1var car = { 2 \u0026#34;doors\u0026#34;: 4, 3 \u0026#34;engine\u0026#34;: 2.0, 4 \u0026#34;color\u0026#34;: \u0026#34;black\u0026#34; 5}; 6 7var hasDoor = car.hasOwnProperty(\u0026#34;doors\u0026#34;); 8 9console.log(hasDoor); Output:\n1true Example 3:\nHere we will purposely misspell the property name of our object so that the hasOwnProperty method returns false .\n1var shoppingCart = { 2 \u0026#34;fruits\u0026#34;: true, 3 \u0026#34;bread\u0026#34;: false 4}; 5 6var hasFruits = shoppingCart.hasOwnProperty(\u0026#34;fruites\u0026#34;); 7 8console.log(hasFruits); Output:\n1false Why is it important to use the hasOwnProperty method?\rLet\u0026rsquo;s look at the importance of using the hasOwnProperty method to check if a property exists within an object in JavaScript.\nEverything in JavaScript is an object.\rThat\u0026rsquo;s right, any element created in JavaScript is considered an object. Numbers, Text Strings, Arrays and any other JavaScript data type inherit properties from a parent object.\nExample 1:\nThe numeric data type in JavaScript is considered an object.\n1var number = 10.22333; 2var otherNumber = number.toPrecision(3); 3 4console.log(otherNumber); Output:\n110.2 Example 2:\nThe string data type is also considered an object.\n1var name = \u0026#34;Peter Max\u0026#34;; 2var char = name.charAt(2); 3 4console.log(char); Output:\n1t Example 3:\nEven arrays in JavaScript are objects.\n1var cars = [\u0026#34;BMW\u0026#34;, \u0026#34;Audi\u0026#34;, \u0026#34;Aston Martin\u0026#34;]; 2 3var carIndexNumber = cars.indexOf(\u0026#34;BMW\u0026#34;); 4 5console.log(carIndexNumber); Output:\n10 In the previous examples, all objects inherit properties from the main object, Object.\nThe \u0026ldquo;in\u0026rdquo; command in JavaScript\rNew JavaScript programmers typically use the in command to check if a property exists on a given object.\nExample:\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if (\u0026#34;engine\u0026#34; in car) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} Output:\n1true The problem is that the in command is comprehensive. It will do a search for all properties of the object. User-created properties and properties inherited from the parent object are included in the check.\nThis can cause a logic error if the programmer happens to run a piece of code only if an object property exists.\nBut the programmer wants to check a default property of the object? Or a user-created property?\nExample:\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if (\u0026#34;toString\u0026#34; in car) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} Output:\n1true In the previous example, the command in returns true, that is, it assumes that the toString property exists in our object, even though this property has not been declared by us.\nThe toString property/method is inherited from the parent object. To avoid this confusion always use the hasOwnProperty method .\nExample:\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if ( car.hasOwnProperty(\u0026#34;toString\u0026#34;) ) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} Output:\n1false Now the return value was false. This is because, as we saw earlier, the hasOwnProperty method only searches for user-defined properties.\n","date":"Feb 25, 2022","img":"","permalink":"/articles/javascript-hasownproperty/","series":null,"tags":["JavaScript"],"title":"Learn How to Use JavaScript hasOwnProperty() Method"}]