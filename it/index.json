[{"categories":null,"content":"jQuery ha una funzione destinata solo a rimuovere gli elementi figli dall\u0026rsquo;interno di un altro elemento. Il metodo \u0026ldquo;empty()\u0026rdquo; può essere utilizzato direttamente sull\u0026rsquo;oggetto.\nConsidera il codice HTML di seguito.\n1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;title\u0026gt;Lorem ipsum dolor sit amet\u0026lt;/title\u0026gt; 5\u0026lt;/head\u0026gt; 6\u0026lt;body\u0026gt; 7 \u0026lt;div id=\u0026#34;myDiv\u0026#34;\u0026gt; 8 \u0026lt;p\u0026gt;First paragraph\u0026lt;/p\u0026gt; 9 \u0026lt;p\u0026gt;Second paragraph\u0026lt;/p\u0026gt; 10 \u0026lt;p\u0026gt;Third paragraph\u0026lt;/p\u0026gt; 11 \u0026lt;p\u0026gt;Fourth paragraph\u0026lt;/p\u0026gt; 12 \u0026lt;/div\u0026gt; 13 \u0026lt;script src=\u0026#34;https://code.jquery.com/jquery-3.6.0.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 14\u0026lt;/body\u0026gt; 15\u0026lt;/html\u0026gt; Per rimuovere tutti i paragrafi all\u0026rsquo;interno dell\u0026rsquo;elemento \u0026ldquo;myDiv\u0026rdquo; basta usare il seguente codice in jQuery.\n1$(\u0026#34;#myDiv\u0026#34;).empty(); Ma come possiamo eseguire questa stessa operazione usando solo JavaScript?\nRimozione di elementi figlio da un nodo DOM utilizzando JavaScript\rJavaScript consente al programmatore di rimuovere elementi da un nodo DOM tramite varie proprietà. Impariamo come eseguire questa rimozione utilizzando ciascuno di essi.\ninnerHTML\rUna di queste proprietà è \u0026ldquo;innerHTML\u0026rdquo;. Consente di sostituire tutto l\u0026rsquo;HTML interno dell\u0026rsquo;elemento. Compreso di essere sostituito da una stringa vuota, rendendo vuoto l\u0026rsquo;elemento in questione.\nPer rimuovere tutti i nodi all\u0026rsquo;interno dell\u0026rsquo;elemento \u0026ldquo;myDiv\u0026rdquo; utilizzare il seguente JavaScript.\n1document.getElementById(\u0026#34;myDiv\u0026#34;).innerHTML = \u0026#34;\u0026#34;; Di seguito puoi vedere un esempio completo in HTML. Qui utilizziamo un pulsante per rimuovere gli elementi.\n1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;title\u0026gt;Removing HTML elements using innerHTML\u0026lt;/title\u0026gt; 5 \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; 6\u0026lt;/head\u0026gt; 7\u0026lt;body\u0026gt; 8 \u0026lt;div id=\u0026#34;myDiv\u0026#34; style=\u0026#34;border: 3px dashed red; margin-bottom: 20px;\u0026#34;\u0026gt; 9 \u0026lt;p\u0026gt;First paragraph\u0026lt;/p\u0026gt; 10 \u0026lt;p\u0026gt;Second paragraph\u0026lt;/p\u0026gt; 11 \u0026lt;p\u0026gt;Third paragraph\u0026lt;/p\u0026gt; 12 \u0026lt;p\u0026gt;Fourth paragraph\u0026lt;/p\u0026gt; 13 \u0026lt;/div\u0026gt; 14 15 \u0026lt;button id=\u0026#39;removeElements\u0026#39;\u0026gt;Remove paragraphs (innerHTML)\u0026lt;/button\u0026gt; 16 17 \u0026lt;script\u0026gt; 18 const button = document.getElementById(\u0026#34;removeElements\u0026#34;); 19 button.onclick = function () { 20 document.getElementById(\u0026#34;myDiv\u0026#34;).innerHTML = \u0026#34;\u0026#34;; 21 }; 22 \u0026lt;/script\u0026gt; 23\u0026lt;/body\u0026gt; 24\u0026lt;/html\u0026gt; textContent\rLa proprietà \u0026ldquo;textContent\u0026rdquo; può essere utilizzata per sostituire tutti gli elementi all\u0026rsquo;interno di un nodo con una stringa vuota.\nA seconda del browser, l\u0026rsquo;utilizzo di \u0026ldquo;textContent\u0026rdquo; potrebbe avere prestazioni migliori rispetto a \u0026ldquo;innerHTML\u0026rdquo;.\n1document.getElementById(\u0026#34;myDiv\u0026#34;).textContent = \u0026#34;\u0026#34;; Rimuovere gli elementi figlio usando un ciclo (\u0026ldquo;lastChild\u0026rdquo;)\rNell\u0026rsquo;esempio seguente, utilizziamo il ciclo \u0026ldquo;while\u0026rdquo; per verificare se il nostro elemento contiene il primo figlio. Se true, indica che c\u0026rsquo;è almeno un elemento figlio all\u0026rsquo;interno dell\u0026rsquo;elemento padre, quindi il ciclo rimuove l\u0026rsquo;ultimo elemento. E il processo si ripete.\nLa rimozione dell\u0026rsquo;ultimo elemento utilizzando la proprietà \u0026ldquo;lastChild\u0026rdquo; di solito ha prestazioni migliori rispetto alla rimozione del primo elemento utilizzando la proprietà \u0026ldquo;firstChild\u0026rdquo;.\n1const element = document.getElementById(\u0026#34;myDiv\u0026#34;); 2while (element.firstChild) { 3 element.removeChild(element.lastChild); 4} Rimuovere gli elementi figlio usando un ciclo (\u0026ldquo;lastElementChild\u0026rdquo;)\rQui otterremo lo stesso risultato, ma preservando i \u0026ldquo;non elementi\u0026rdquo; come i nodi di testo \u0026ldquo;#text\u0026rdquo; e i commenti \u0026ldquo;\u0026lt;!\u0026ndash; comments \u0026ndash;\u0026gt;\u0026rdquo;.\n1const element = document.getElementById(\u0026#34;myDiv\u0026#34;); 2while (element.firstChild) { 3 element.removeChild(element.lastElementChild); 4} Un\u0026rsquo;altra caratteristica di \u0026ldquo;lastElementChild\u0026rdquo; consiste nel preservare i nodi figlio all\u0026rsquo;interno dell\u0026rsquo;elemento padre che non sono discendenti diretti.\nAd esempio, considera la struttura degli elementi di seguito.\n1Parent element 2| 3 — First node 4| | 5| — Node 1 6| | 7| — Node 2 8| 9 — Second node Quando si utilizza \u0026ldquo;lastElementChild\u0026rdquo;, il \u0026ldquo;First node\u0026rdquo; e il \u0026ldquo;Second node\u0026rdquo; vengono rimossi. \u0026ldquo;Node 1\u0026rdquo; e \u0026ldquo;Node 2\u0026rdquo; non verrebbero rimossi.\nRimuovi gli elementi figlio con il metodo \u0026ldquo;remove\u0026rdquo;.\r1const element = document.getElementById(\u0026#34;myDiv\u0026#34;); 2while (element.firstChild) { 3 element.lastChild.remove(); 4} La funzione \u0026ldquo;rimuovi\u0026rdquo; è stata aggiunta in ES5. Ha una sintassi di concatenamento più semplice e diretta. Ha già un eccellente supporto in molti browser\r.\nRimuovere gli elementi con il metodo \u0026ldquo;replaceChildren\u0026rdquo;.\rC\u0026rsquo;è anche la possibilità di rimuovere elementi figlio da un nodo DOM utilizzando l\u0026rsquo;API \u0026ldquo;replaceChildren\u0026rdquo;. Questo metodo consente non solo di rimuovere elementi all\u0026rsquo;interno di un elemento padre, ma anche di sostituirli con altri elementi in una sola operazione.\nPer rimuovere solo gli elementi figlio, chiama l\u0026rsquo;API senza argomenti.\n1const element = document.getElementById(\u0026#34;myDiv\u0026#34;); 2element.replaceChildren(); L\u0026rsquo;API \u0026ldquo;replaceChildren\u0026rdquo; è già ben supportata dai browser moderni\r.\n","date":"05/03/2022","img":"","permalink":"https://w3source.org/it/articles/javascript-equivalent-to-jquery-empty/","series":null,"tags":["JavaScript","jQuery"],"title":"Codice JavaScript Vanilla equivalente a jQuery.empty()"},{"categories":null,"content":"Molti utenti hanno dubbi su come verificare se esiste un elemento del DOM HTML utilizzando jQuery. In poche parole, come verificare se un elemento esiste nella pagina nel modo più semplice possibile?\nCi sono diversi modi che possiamo usare per ottenere questo risultato. Uno di questi è controllare se la proprietà \u0026ldquo;length\u0026rdquo; del selettore di elementi restituisce un numero maggiore di 0.\nAd esempio, se abbiamo un HTML simile a quello mostrato di seguito.\n1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;title\u0026gt;Lorem ipsum dolor\u0026lt;/title\u0026gt; 5 \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; 6\u0026lt;/head\u0026gt; 7\u0026lt;body\u0026gt; 8 \u0026lt;div id=\u0026#34;myDiv\u0026#34;\u0026gt;Lorem ipsum dolor sit amet.\u0026lt;/div\u0026gt; 9\u0026lt;/body\u0026gt; 10\u0026lt;/html\u0026gt; E vogliamo verificare se nel DOM esiste l\u0026rsquo;elemento “myDiv”, ovvero nella pagina possiamo utilizzare il seguente codice.\n1if ($(\u0026#34;#myDiv\u0026#34;).length \u0026gt; 0) { 2 console.log(\u0026#34;The element exists!\u0026#34;); 3} Semplificando il codice\rPoiché molte cose in JavaScript sono vere o false, anche il ritorno della proprietà \u0026ldquo;length\u0026rdquo; può essere considerato vero o falso. Il ritorno è un numero, 0 rappresenta \u0026ldquo;falso\u0026rdquo; e tutto il resto rappresenta \u0026ldquo;vero\u0026rdquo;.\nQuindi possiamo semplificare il codice come segue.\n1if ($(\u0026#34;#myDiv\u0026#34;).length) { 2 console.log(\u0026#34;The element exists!\u0026#34;); 3} Anche rimuovendo il comparativo “\u0026gt; 0”, il valore di ritorno rimane lo stesso.\nCreazione di una funzione \u0026ldquo;esiste\u0026rdquo; per jQuery\rPossiamo andare un po' oltre e aggiungere una funzione denominata \u0026ldquo;esiste\u0026rdquo;. Questa funzione può essere utilizzata direttamente con l\u0026rsquo;elemento che vogliamo controllare.\n1jQuery.fn.exists = function() { 2 return ( $(this).length \u0026gt; 0); 3} 4 5var elementExists = $(\u0026#34;#myDiv\u0026#34;).exists(); 6 7console.log(elementExists); Possiamo migliorare ancora ed evitare che il metodo rappresenti una possibilità di concatenamento. Cosa che in questo caso non è possibile. Lo faremo come segue.\n1jQuery.exists = function(selector) { 2 return ( $(selector).length \u0026gt; 0 ); 3} 4 5if ( $.exists(\u0026#34;#myDiv\u0026#34;) ) { 6 console.log(\u0026#34;The element exists!\u0026#34;); 7} Si noti che ora passiamo il selettore come argomento alla funzione \u0026ldquo;esiste\u0026rdquo;, invece di simulare una catena direttamente dall\u0026rsquo;oggetto.\nVerifica dell\u0026rsquo;esistenza di un elemento HTML tramite array\rQuando utilizziamo un selettore in jQuery, restituisce un array di elementi. Se proviamo ad accedere al primo elemento di questo array e restituisce \u0026ldquo;undefined\u0026rdquo;, indica che l\u0026rsquo;elemento in questione non esiste nel DOM.\n1if ( $(\u0026#39;#myDiv\u0026#39;)[0] ) { 2 console.log(\u0026#34;The element exists!\u0026#34;); 3} Come puoi vedere, ci sono diversi modi per verificare l\u0026rsquo;esistenza di un elemento HTML nella pagina. Qual è la migliore? Bene, quello che risolve il tuo problema. L\u0026rsquo;importante è che il codice sia in esecuzione e funzionante.\n","date":"03/03/2022","img":"","permalink":"https://w3source.org/it/articles/is-there-an-exists-function-for-jquery/","series":null,"tags":["JavaScript","jQuery"],"title":"Esiste una funzione 'exists' in jQuery? (L'elemento HTML esiste?)"},{"categories":null,"content":"Il metodo hasOwnProperty di JavaScript viene utilizzato per verificare se un determinato oggetto ha una proprietà specifica.\nLa proprietà verificata dal metodo hasOwnProperty è interna all\u0026rsquo;oggetto in questione, ovvero deve essere stata definita dall\u0026rsquo;utente.\nSe la proprietà passata a hasOwnProperty esiste sull\u0026rsquo;oggetto, il metodo restituisce true , altrimenti restituisce false .\nEsempio 1:\nIn questo esempio, creiamo l' oggetto person e aggiungiamo la proprietà name , quindi utilizziamo hasOwnProperty per verificare che questa proprietà faccia parte del nostro oggetto.\n1var person = { 2 \u0026#34;name\u0026#34;: \u0026#34;Brian\u0026#34;, 3 \u0026#34;lastName\u0026#34;: \u0026#34;Scott\u0026#34; 4}; 5 6console.log( person.hasOwnProperty(\u0026#34;name\u0026#34;) ); Uscita:\n1true Esempio 2:\nIn questo esempio, dichiariamo un oggetto chiamato car e gli assegneremo una proprietà chiamata porte , così possiamo usare hasOwnProperty per controllare questa proprietà.\n1var car = { 2 \u0026#34;doors\u0026#34;: 4, 3 \u0026#34;engine\u0026#34;: 2.0, 4 \u0026#34;color\u0026#34;: \u0026#34;black\u0026#34; 5}; 6 7var hasDoor = car.hasOwnProperty(\u0026#34;doors\u0026#34;); 8 9console.log(hasDoor); Uscita:\n1true Esempio 3:\nQui cercheremo di scrivere in modo errato di proposito il nome della proprietà del nostro oggetto in modo che il metodo hasOwnProperty restituisca false .\n1var shoppingCart = { 2 \u0026#34;fruits\u0026#34;: true, 3 \u0026#34;bread\u0026#34;: false 4}; 5 6var hasFruits = shoppingCart.hasOwnProperty(\u0026#34;fruites\u0026#34;); 7 8console.log(hasFruits); Uscita:\n1false Perché è importante utilizzare il metodo hasOwnProperty?\rDiamo un\u0026rsquo;occhiata all\u0026rsquo;importanza di utilizzare il metodo hasOwnProperty per verificare se esiste una proprietà all\u0026rsquo;interno di un oggetto in JavaScript.\nTutto in JavaScript è un oggetto.\rEsatto, qualsiasi elemento creato in JavaScript è considerato un oggetto. Numeri, stringhe di testo, matrici e qualsiasi altro tipo di dati JavaScript ereditano le proprietà da un oggetto padre.\nEsempio 1:\nIl tipo di dati numerico in JavaScript è considerato un oggetto.\n1var number = 10.22333; 2var otherNumber = number.toPrecision(3); 3 4console.log(otherNumber); Uscita:\n110.2 Esempio 2:\nAnche il tipo di dati stringa è considerato un oggetto.\n1var name = \u0026#34;Peter Max\u0026#34;; 2var char = name.charAt(2); 3 4console.log(char); Uscita:\n1t Esempio 3:\nAnche gli array in JavaScript sono oggetti.\n1var cars = [\u0026#34;BMW\u0026#34;, \u0026#34;Audi\u0026#34;, \u0026#34;Aston Martin\u0026#34;]; 2 3var carIndexNumber = cars.indexOf(\u0026#34;BMW\u0026#34;); 4 5console.log(carIndexNumber); Uscita:\n10 Negli esempi precedenti, tutti gli oggetti ereditano le proprietà dall\u0026rsquo;oggetto principale, Object.\nIl comando \u0026ldquo;in\u0026rdquo; in JavaScript\rI nuovi programmatori JavaScript in genere utilizzano il comando in per verificare se esiste una proprietà su un determinato oggetto.\nEsempio:\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if (\u0026#34;engine\u0026#34; in car) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} Uscita:\n1true Il problema è che il comando in è completo. Farà una ricerca per tutte le proprietà dell\u0026rsquo;oggetto. Le proprietà create dall\u0026rsquo;utente e le proprietà ereditate dall\u0026rsquo;oggetto padre sono incluse nel controllo.\nCiò può causare un errore logico se il programmatore esegue una parte di codice solo se esiste una proprietà dell\u0026rsquo;oggetto.\nMa il programmatore vuole controllare una proprietà di default dell\u0026rsquo;oggetto? O una proprietà creata dall\u0026rsquo;utente?\nEsempio:\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if (\u0026#34;toString\u0026#34; in car) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} Uscita:\n1true Nell\u0026rsquo;esempio precedente, il comando in restituisce true , ovvero presuppone che la proprietà toString esista nel nostro oggetto, anche se questa proprietà non è stata dichiarata da noi.\nLa proprietà/metodo toString viene ereditata dall\u0026rsquo;oggetto padre. Per evitare questa confusione, utilizzare sempre il metodo hasOwnProperty .\nEsempio:\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if ( car.hasOwnProperty(\u0026#34;toString\u0026#34;) ) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} Uscita:\n1false Ora il ritorno era il valore false . Questo perché, come abbiamo visto in precedenza, il metodo hasOwnProperty cerca solo le proprietà definite dall\u0026rsquo;utente.\n","date":"25/02/2022","img":"","permalink":"https://w3source.org/it/articles/javascript-hasownproperty/","series":null,"tags":["JavaScript"],"title":"Scopri come utilizzare il metodo hasOwnProperty di JavaScript"}]