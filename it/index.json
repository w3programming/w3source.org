[{"categories":null,"content":"Il metodo hasOwnProperty di JavaScript viene utilizzato per verificare se un determinato oggetto ha una proprietà specifica.\nLa proprietà verificata dal metodo hasOwnProperty è interna all\u0026rsquo;oggetto in questione, ovvero deve essere stata definita dall\u0026rsquo;utente.\nSe la proprietà passata a hasOwnProperty esiste sull\u0026rsquo;oggetto, il metodo restituisce true , altrimenti restituisce false .\nEsempio 1:\nIn questo esempio, creiamo l' oggetto person e aggiungiamo la proprietà name , quindi utilizziamo hasOwnProperty per verificare che questa proprietà faccia parte del nostro oggetto.\n1var person = { 2 \u0026#34;name\u0026#34;: \u0026#34;Brian\u0026#34;, 3 \u0026#34;lastName\u0026#34;: \u0026#34;Scott\u0026#34; 4}; 5 6console.log( person.hasOwnProperty(\u0026#34;name\u0026#34;) ); Uscita:\n1true Esempio 2:\nIn questo esempio, dichiariamo un oggetto chiamato car e gli assegneremo una proprietà chiamata porte , così possiamo usare hasOwnProperty per controllare questa proprietà.\n1var car = { 2 \u0026#34;doors\u0026#34;: 4, 3 \u0026#34;engine\u0026#34;: 2.0, 4 \u0026#34;color\u0026#34;: \u0026#34;black\u0026#34; 5}; 6 7var hasDoor = car.hasOwnProperty(\u0026#34;doors\u0026#34;); 8 9console.log(hasDoor); Uscita:\n1true Esempio 3:\nQui cercheremo di scrivere in modo errato di proposito il nome della proprietà del nostro oggetto in modo che il metodo hasOwnProperty restituisca false .\n1var shoppingCart = { 2 \u0026#34;fruits\u0026#34;: true, 3 \u0026#34;bread\u0026#34;: false 4}; 5 6var hasFruits = shoppingCart.hasOwnProperty(\u0026#34;fruites\u0026#34;); 7 8console.log(hasFruits); Uscita:\n1false Perché è importante utilizzare il metodo hasOwnProperty?\rDiamo un\u0026rsquo;occhiata all\u0026rsquo;importanza di utilizzare il metodo hasOwnProperty per verificare se esiste una proprietà all\u0026rsquo;interno di un oggetto in JavaScript.\nTutto in JavaScript è un oggetto.\rEsatto, qualsiasi elemento creato in JavaScript è considerato un oggetto. Numeri, stringhe di testo, matrici e qualsiasi altro tipo di dati JavaScript ereditano le proprietà da un oggetto padre.\nEsempio 1:\nIl tipo di dati numerico in JavaScript è considerato un oggetto.\n1var number = 10.22333; 2var otherNumber = number.toPrecision(3); 3 4console.log(otherNumber); Uscita:\n110.2 Esempio 2:\nAnche il tipo di dati stringa è considerato un oggetto.\n1var name = \u0026#34;Peter Max\u0026#34;; 2var char = name.charAt(2); 3 4console.log(char); Uscita:\n1t Esempio 3:\nAnche gli array in JavaScript sono oggetti.\n1var cars = [\u0026#34;BMW\u0026#34;, \u0026#34;Audi\u0026#34;, \u0026#34;Aston Martin\u0026#34;]; 2 3var carIndexNumber = cars.indexOf(\u0026#34;BMW\u0026#34;); 4 5console.log(carIndexNumber); Uscita:\n10 Negli esempi precedenti, tutti gli oggetti ereditano le proprietà dall\u0026rsquo;oggetto principale, Object.\nIl comando \u0026ldquo;in\u0026rdquo; in JavaScript\rI nuovi programmatori JavaScript in genere utilizzano il comando in per verificare se esiste una proprietà su un determinato oggetto.\nEsempio:\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if (\u0026#34;engine\u0026#34; in car) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} Uscita:\n1true Il problema è che il comando in è completo. Farà una ricerca per tutte le proprietà dell\u0026rsquo;oggetto. Le proprietà create dall\u0026rsquo;utente e le proprietà ereditate dall\u0026rsquo;oggetto padre sono incluse nel controllo.\nCiò può causare un errore logico se il programmatore esegue una parte di codice solo se esiste una proprietà dell\u0026rsquo;oggetto.\nMa il programmatore vuole controllare una proprietà di default dell\u0026rsquo;oggetto? O una proprietà creata dall\u0026rsquo;utente?\nEsempio:\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if (\u0026#34;toString\u0026#34; in car) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} Uscita:\n1true Nell\u0026rsquo;esempio precedente, il comando in restituisce true , ovvero presuppone che la proprietà toString esista nel nostro oggetto, anche se questa proprietà non è stata dichiarata da noi.\nLa proprietà/metodo toString viene ereditata dall\u0026rsquo;oggetto padre. Per evitare questa confusione, utilizzare sempre il metodo hasOwnProperty .\nEsempio:\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if ( car.hasOwnProperty(\u0026#34;toString\u0026#34;) ) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} Uscita:\n1false Ora il ritorno era il valore false . Questo perché, come abbiamo visto in precedenza, il metodo hasOwnProperty cerca solo le proprietà definite dall\u0026rsquo;utente.\n","date":"25/02/2022","img":"","permalink":"/it/articles/javascript-hasownproperty/","series":null,"tags":["JavaScript"],"title":"Scopri come utilizzare il metodo hasOwnProperty di JavaScript"}]