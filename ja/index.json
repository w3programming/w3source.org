[{"categories":null,"content":"jQueryには、別の要素内から子要素を削除することのみを目的とした関数があります。「empty（）」メソッドは、オブジェクトで直接使用できます。\n以下のHTMLコードを検討してください。\n1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;title\u0026gt;Lorem ipsum dolor sit amet\u0026lt;/title\u0026gt; 5\u0026lt;/head\u0026gt; 6\u0026lt;body\u0026gt; 7 \u0026lt;div id=\u0026#34;myDiv\u0026#34;\u0026gt; 8 \u0026lt;p\u0026gt;First paragraph\u0026lt;/p\u0026gt; 9 \u0026lt;p\u0026gt;Second paragraph\u0026lt;/p\u0026gt; 10 \u0026lt;p\u0026gt;Third paragraph\u0026lt;/p\u0026gt; 11 \u0026lt;p\u0026gt;Fourth paragraph\u0026lt;/p\u0026gt; 12 \u0026lt;/div\u0026gt; 13 \u0026lt;script src=\u0026#34;https://code.jquery.com/jquery-3.6.0.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 14\u0026lt;/body\u0026gt; 15\u0026lt;/html\u0026gt; 「myDiv」要素内のすべての段落を削除するには、jQueryで次のコードを使用するだけです。\n1$(\u0026#34;#myDiv\u0026#34;).empty(); しかし、JavaScriptだけを使用してこれと同じ操作を実行するにはどうすればよいでしょうか。\nJavaScriptを使用したDOMノードからの子要素の削除\rJavaScriptを使用すると、プログラマーはさまざまなプロパティを使用してDOMノードから要素を削除できます。それぞれを使用してこの削除を行う方法を学びましょう。\ninnerHTML\rこれらのプロパティの1つは「innerHTML」です。これにより、要素のすべての内部HTMLを置き換えることができます。空の文字列に置き換えられることを含め、問題の要素を空にします。\n「myDiv」要素内のすべての子ノードを削除するには、次のJavaScriptを使用します。\n1document.getElementById(\u0026#34;myDiv\u0026#34;).innerHTML = \u0026#34;\u0026#34;; 以下に、HTMLでの完全な例を示します。ここでは、ボタンを使用して要素を削除します。\n1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;title\u0026gt;Removing HTML elements using innerHTML\u0026lt;/title\u0026gt; 5 \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; 6\u0026lt;/head\u0026gt; 7\u0026lt;body\u0026gt; 8 \u0026lt;div id=\u0026#34;myDiv\u0026#34; style=\u0026#34;border: 3px dashed red; margin-bottom: 20px;\u0026#34;\u0026gt; 9 \u0026lt;p\u0026gt;First paragraph\u0026lt;/p\u0026gt; 10 \u0026lt;p\u0026gt;Second paragraph\u0026lt;/p\u0026gt; 11 \u0026lt;p\u0026gt;Third paragraph\u0026lt;/p\u0026gt; 12 \u0026lt;p\u0026gt;Fourth paragraph\u0026lt;/p\u0026gt; 13 \u0026lt;/div\u0026gt; 14 15 \u0026lt;button id=\u0026#39;removeElements\u0026#39;\u0026gt;Remove paragraphs (innerHTML)\u0026lt;/button\u0026gt; 16 17 \u0026lt;script\u0026gt; 18 const button = document.getElementById(\u0026#34;removeElements\u0026#34;); 19 button.onclick = function () { 20 document.getElementById(\u0026#34;myDiv\u0026#34;).innerHTML = \u0026#34;\u0026#34;; 21 }; 22 \u0026lt;/script\u0026gt; 23\u0026lt;/body\u0026gt; 24\u0026lt;/html\u0026gt; textContent\r「textContent」プロパティを使用して、ノード内のすべての要素を空の文字列に置き換えることができます。\nブラウザによっては、「textContent」を使用すると「innerHTML」よりもパフォーマンスが向上する場合があります。\n1document.getElementById(\u0026#34;myDiv\u0026#34;).textContent = \u0026#34;\u0026#34;; ループを使用して子要素を削除します（「lastChild」）\r以下の例では、「while」ループを使用して、要素に最初の子が含まれているかどうかを確認します。trueの場合、親要素内に少なくとも1つの子要素があることを示しているため、ループは最後の要素を削除します。そして、このプロセスが繰り返されます。\n「lastChild」プロパティを使用して最後の要素を削除すると、通常、「firstChild」プロパティを使用して最初の要素を削除するよりもパフォーマンスが向上します。\n1const element = document.getElementById(\u0026#34;myDiv\u0026#34;); 2while (element.firstChild) { 3 element.removeChild(element.lastChild); 4} ループを使用して子要素を削除します（「lastElementChild」）\rここでも同じ結果が得られますが、テキストノード「#text」やコメント「\u0026lt;!\u0026ndash; comments \u0026ndash;\u0026gt;」などの「非要素」は保持されます。\n1const element = document.getElementById(\u0026#34;myDiv\u0026#34;); 2while (element.firstChild) { 3 element.removeChild(element.lastElementChild); 4} 「lastElementChild」のもう1つの機能は、直接の子孫ではない親要素内の子ノードを保持することです。\nたとえば、以下の要素の構造を考えてみましょう。\n1Parent element 2| 3 — First node 4| | 5| — Node 1 6| | 7| — Node 2 8| 9 — Second node 「lastElementChild」を使用すると、「First node」と「Second node」が削除されます。「Node 1」と「Node 2」は削除されません。\n「remove」メソッドを使用して子要素を削除します\r1const element = document.getElementById(\u0026#34;myDiv\u0026#34;); 2while (element.firstChild) { 3 element.lastChild.remove(); 4} 「remove」機能がES5に追加されました。これは、より単純でより直接的な連鎖構文を持っています。すでに多くのブラウザで優れたサポートを提供しています\r。\n「replaceChildren」メソッドを使用して要素を削除します\r「replaceChildren」APIを使用してDOMノードから子要素を削除する可能性もあります。このメソッドを使用すると、親要素内から要素を削除できるだけでなく、1回の操作で他の要素に置き換えることもできます。\n子要素を削除するには、引数なしでAPIを呼び出します。\n1const element = document.getElementById(\u0026#34;myDiv\u0026#34;); 2element.replaceChildren(); 「replaceChildren」APIは、最新のブラウザですでに十分にサポートされ\rています 。\n","date":"2022年03月05日","img":"","permalink":"https://w3source.org/ja/articles/javascript-equivalent-to-jquery-empty/","series":null,"tags":["JavaScript","jQuery"],"title":"jQuery.empty（）と同等のバニラJavaScriptコード"},{"categories":null,"content":"多くのユーザーは、jQueryを使用して要素がHTML DOMに存在するかどうかを確認する方法について疑問を持っています。一言で言えば、要素がページに存在するかどうかを可能な限り簡単な方法で確認するにはどうすればよいですか？\nこの結果を達成するために使用できる方法はいくつかあります。それらの1つは、要素セレクターの「長さ」プロパティが0より大きい数値を返すかどうかを確認することです。\nたとえば、次のようなHTMLがあるとします。\n1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;title\u0026gt;Lorem ipsum dolor\u0026lt;/title\u0026gt; 5 \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; 6\u0026lt;/head\u0026gt; 7\u0026lt;body\u0026gt; 8 \u0026lt;div id=\u0026#34;myDiv\u0026#34;\u0026gt;Lorem ipsum dolor sit amet.\u0026lt;/div\u0026gt; 9\u0026lt;/body\u0026gt; 10\u0026lt;/html\u0026gt; そして、要素「myDiv」がDOMに存在するかどうかを確認します。つまり、ページ上で次のコードを使用できます。\n1if ($(\u0026#34;#myDiv\u0026#34;).length \u0026gt; 0) { 2 console.log(\u0026#34;The element exists!\u0026#34;); 3} コードを簡素化する\rJavaScriptの多くはtrueまたはfalseのいずれかであるため、「length」プロパティの戻り値もtrueまたはfalseと見なすことができます。戻り値は数値であり、0は「偽」を表し、その他はすべて「真」を表します。\nしたがって、次のようにコードを簡略化できます。\n1if ($(\u0026#34;#myDiv\u0026#34;).length) { 2 console.log(\u0026#34;The element exists!\u0026#34;); 3} 比較の「\u0026gt; 0」を削除しても、戻り値は同じままです。\njQueryの「exists」関数を作成する\rもう少し進んで、「exists」という名前の関数を追加できます。この関数は、チェックする要素で直接使用できます。\n1jQuery.fn.exists = function() { 2 return ( $(this).length \u0026gt; 0); 3} 4 5var elementExists = $(\u0026#34;#myDiv\u0026#34;).exists(); 6 7console.log(elementExists); さらに改善し、メソッドが連鎖の可能性を表すのを防ぐことができます。この場合、これは不可能です。次のようにします。\n1jQuery.exists = function(selector) { 2 return ( $(selector).length \u0026gt; 0 ); 3} 4 5if ( $.exists(\u0026#34;#myDiv\u0026#34;) ) { 6 console.log(\u0026#34;The element exists!\u0026#34;); 7} オブジェクトから直接チェーンをシミュレートするのではなく、「exists」関数への引数としてセレクターを渡すことに注意してください。\n配列を使用してHTML要素の存在を確認する\rjQueryでセレクターを使用すると、要素の配列が返されます。この配列の最初の要素にアクセスしようとして「undefined」が返される場合は、問題の要素がDOMに存在しないことを示しています。\n1if ( $(\u0026#39;#myDiv\u0026#39;)[0] ) { 2 console.log(\u0026#34;The element exists!\u0026#34;); 3} ご覧のとおり、ページ上のHTML要素の存在を確認する方法はいくつかあります。一番良いのは何ですか？さて、あなたの問題を解決するもの。重要なことは、コードが実行され、機能していることです。\n","date":"2022年03月03日","img":"","permalink":"https://w3source.org/ja/articles/is-there-an-exists-function-for-jquery/","series":null,"tags":["JavaScript","jQuery"],"title":"jQueryに「exists」関数はありますか？（HTML要素は存在しますか？）"},{"categories":null,"content":"JavaScriptのhasOwnPropertyメソッドは、特定のオブジェクトに特定のプロパティがあるかどうかを確認するために使用されます。\nhasOwnPropertyメソッドによってチェックされるプロパティは、問題のオブジェクトの内部にあります。つまり、ユーザーによって定義されている必要があります。\nhasOwnPropertyに渡されたプロパティがオブジェクトに存在する場合、メソッドはtrueを返し、そうでない場合はfalseを返します。\n例1：\nこの例では、 personオブジェクトを作成し、nameプロパティを追加してから、hasOwnPropertyを使用して、このプロパティがオブジェクトの一部であるかどうかを確認します。\n1var person = { 2 \u0026#34;name\u0026#34;: \u0026#34;Brian\u0026#34;, 3 \u0026#34;lastName\u0026#34;: \u0026#34;Scott\u0026#34; 4}; 5 6console.log( person.hasOwnProperty(\u0026#34;name\u0026#34;) ); 出力：\n1true 例2：\nこの例では、carという名前のオブジェクトを宣言し、それにdoorsというプロパティを割り当てるので、hasOwnPropertyを使用してこのプロパティをチェックできます。\n1var car = { 2 \u0026#34;doors\u0026#34;: 4, 3 \u0026#34;engine\u0026#34;: 2.0, 4 \u0026#34;color\u0026#34;: \u0026#34;black\u0026#34; 5}; 6 7var hasDoor = car.hasOwnProperty(\u0026#34;doors\u0026#34;); 8 9console.log(hasDoor); 出力：\n1true 例3：\nここでは、hasOwnPropertyメソッドがfalseを返すように、オブジェクトのプロパティ名のスペルを意図的に間違えます。\n1var shoppingCart = { 2 \u0026#34;fruits\u0026#34;: true, 3 \u0026#34;bread\u0026#34;: false 4}; 5 6var hasFruits = shoppingCart.hasOwnProperty(\u0026#34;fruites\u0026#34;); 7 8console.log(hasFruits); 出力：\n1false hasOwnPropertyメソッドを使用することが重要なのはなぜですか？\rhasOwnPropertyメソッドを使用して、JavaScriptのオブジェクト内にプロパティが存在するかどうかを確認することの重要性を見てみましょう。\nJavaScriptのすべてがオブジェクトです。\rそうです、JavaScriptで作成された要素はすべてオブジェクトと見なされます。数値、テキスト文字列、配列、およびその他のJavaScriptデータ型は、親オブジェクトからプロパティを継承します。\n例1：\nJavaScriptの数値データ型はオブジェクトと見なされます。\n1var number = 10.22333; 2var otherNumber = number.toPrecision(3); 3 4console.log(otherNumber); 出力：\n110.2 例2：\n文字列データ型もオブジェクトと見なされます。\n1var name = \u0026#34;Peter Max\u0026#34;; 2var char = name.charAt(2); 3 4console.log(char); 出力：\n1t 例3：\nJavaScriptの配列でさえオブジェクトです。\n1var cars = [\u0026#34;BMW\u0026#34;, \u0026#34;Audi\u0026#34;, \u0026#34;Aston Martin\u0026#34;]; 2 3var carIndexNumber = cars.indexOf(\u0026#34;BMW\u0026#34;); 4 5console.log(carIndexNumber); 出力：\n10 前の例では、すべてのオブジェクトがメインオブジェクトであるObjectからプロパティを継承しています。\nJavaScriptのinコマンド\r新しいJavaScriptプログラマーは通常、inコマンドを使用して、特定のオブジェクトにプロパティが存在するかどうかを確認します。\n例：\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if (\u0026#34;engine\u0026#34; in car) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} 出力：\n1true 問題は、 inコマンドがすべてを網羅していることです。オブジェクトのすべてのプロパティを検索します。ユーザーが作成したプロパティと親オブジェクトから継承されたプロパティがチェックに含まれます。\nこれにより、オブジェクトプロパティが存在する場合にのみプログラマーがコードを実行すると、論理エラーが発生する可能性があります。\nしかし、プログラマーはオブジェクトのデフォルトのプロパティを確認したいですか？または、ユーザーが作成したプロパティですか？\n例：\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if (\u0026#34;toString\u0026#34; in car) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} 出力：\n1true 前の例では、 inコマンドはtrueを返します。つまり、このプロパティが宣言されていなくても、 toStringプロパティがオブジェクトに存在すると想定します。\ntoStringプロパティ/メソッドは、親オブジェクトから継承されます。この混乱を避けるために、常にhasOwnPropertyメソッドを使用してください。\n例：\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if ( car.hasOwnProperty(\u0026#34;toString\u0026#34;) ) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} 出力：\n1false ここで、戻り値はfalseの値でした。これは、前に見たように、hasOwnPropertyメソッドがユーザー定義のプロパティのみを検索するためです。\n","date":"2022年02月25日","img":"","permalink":"https://w3source.org/ja/articles/javascript-hasownproperty/","series":null,"tags":["JavaScript"],"title":"JavaScriptのhasOwnProperty（）メソッドの使用方法を学ぶ"}]