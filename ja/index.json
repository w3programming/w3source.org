[{"categories":null,"content":"JavaScriptのhasOwnPropertyメソッドは、特定のオブジェクトに特定のプロパティがあるかどうかを確認するために使用されます。\nhasOwnPropertyメソッドによってチェックされるプロパティは、問題のオブジェクトの内部にあります。つまり、ユーザーによって定義されている必要があります。\nhasOwnPropertyに渡されたプロパティがオブジェクトに存在する場合、メソッドはtrueを返し、そうでない場合はfalseを返します。\n例1：\nこの例では、 personオブジェクトを作成し、nameプロパティを追加してから、hasOwnPropertyを使用して、このプロパティがオブジェクトの一部であるかどうかを確認します。\n1var person = { 2 \u0026#34;name\u0026#34;: \u0026#34;Brian\u0026#34;, 3 \u0026#34;lastName\u0026#34;: \u0026#34;Scott\u0026#34; 4}; 5 6console.log( person.hasOwnProperty(\u0026#34;name\u0026#34;) ); 出力：\n1true 例2：\nこの例では、carという名前のオブジェクトを宣言し、それにdoorsというプロパティを割り当てるので、hasOwnPropertyを使用してこのプロパティをチェックできます。\n1var car = { 2 \u0026#34;doors\u0026#34;: 4, 3 \u0026#34;engine\u0026#34;: 2.0, 4 \u0026#34;color\u0026#34;: \u0026#34;black\u0026#34; 5}; 6 7var hasDoor = car.hasOwnProperty(\u0026#34;doors\u0026#34;); 8 9console.log(hasDoor); 出力：\n1true 例3：\nここでは、hasOwnPropertyメソッドがfalseを返すように、オブジェクトのプロパティ名のスペルを意図的に間違えます。\n1var shoppingCart = { 2 \u0026#34;fruits\u0026#34;: true, 3 \u0026#34;bread\u0026#34;: false 4}; 5 6var hasFruits = shoppingCart.hasOwnProperty(\u0026#34;fruites\u0026#34;); 7 8console.log(hasFruits); 出力：\n1false hasOwnPropertyメソッドを使用することが重要なのはなぜですか？\rhasOwnPropertyメソッドを使用して、JavaScriptのオブジェクト内にプロパティが存在するかどうかを確認することの重要性を見てみましょう。\nJavaScriptのすべてがオブジェクトです。\rそうです、JavaScriptで作成された要素はすべてオブジェクトと見なされます。数値、テキスト文字列、配列、およびその他のJavaScriptデータ型は、親オブジェクトからプロパティを継承します。\n例1：\nJavaScriptの数値データ型はオブジェクトと見なされます。\n1var number = 10.22333; 2var otherNumber = number.toPrecision(3); 3 4console.log(otherNumber); 出力：\n110.2 例2：\n文字列データ型もオブジェクトと見なされます。\n1var name = \u0026#34;Peter Max\u0026#34;; 2var char = name.charAt(2); 3 4console.log(char); 出力：\n1t 例3：\nJavaScriptの配列でさえオブジェクトです。\n1var cars = [\u0026#34;BMW\u0026#34;, \u0026#34;Audi\u0026#34;, \u0026#34;Aston Martin\u0026#34;]; 2 3var carIndexNumber = cars.indexOf(\u0026#34;BMW\u0026#34;); 4 5console.log(carIndexNumber); 出力：\n10 前の例では、すべてのオブジェクトがメインオブジェクトであるObjectからプロパティを継承しています。\nJavaScriptのinコマンド\r新しいJavaScriptプログラマーは通常、inコマンドを使用して、特定のオブジェクトにプロパティが存在するかどうかを確認します。\n例：\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if (\u0026#34;engine\u0026#34; in car) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} 出力：\n1true 問題は、 inコマンドがすべてを網羅していることです。オブジェクトのすべてのプロパティを検索します。ユーザーが作成したプロパティと親オブジェクトから継承されたプロパティがチェックに含まれます。\nこれにより、オブジェクトプロパティが存在する場合にのみプログラマーがコードを実行すると、論理エラーが発生する可能性があります。\nしかし、プログラマーはオブジェクトのデフォルトのプロパティを確認したいですか？または、ユーザーが作成したプロパティですか？\n例：\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if (\u0026#34;toString\u0026#34; in car) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} 出力：\n1true 前の例では、 inコマンドはtrueを返します。つまり、このプロパティが宣言されていなくても、 toStringプロパティがオブジェクトに存在すると想定します。\ntoStringプロパティ/メソッドは、親オブジェクトから継承されます。この混乱を避けるために、常にhasOwnPropertyメソッドを使用してください。\n例：\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if ( car.hasOwnProperty(\u0026#34;toString\u0026#34;) ) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} 出力：\n1false ここで、戻り値はfalseの値でした。これは、前に見たように、hasOwnPropertyメソッドがユーザー定義のプロパティのみを検索するためです。\n","date":"2022年02月25日","img":"","permalink":"/ja/articles/javascript-hasownproperty/","series":null,"tags":["JavaScript"],"title":"JavaScriptのhasOwnProperty（）メソッドの使用方法を学ぶ"}]