[{"categories":null,"content":"JavaScript의 hasOwnProperty 메서드 는 주어진 객체에 특정 속성이 있는지 확인하는 데 사용됩니다.\nhasOwnProperty 메서드로 확인된 속성 은 해당 개체의 내부에 있습니다. 즉, 사용자가 정의해야 합니다.\nhasOwnProperty 에 전달된 속성 이 객체에 존재하면 메서드는 true 를 반환하고 , 그렇지 않으면 false 를 반환합니다 .\n예 1:\n이 예제에서는 person 객체 를 만들고 name 속성 을 추가 한 다음 hasOwnProperty 를 사용하여 이 속성이 객체의 일부인지 확인합니다.\n1var person = { 2 \u0026#34;name\u0026#34;: \u0026#34;Brian\u0026#34;, 3 \u0026#34;lastName\u0026#34;: \u0026#34;Scott\u0026#34; 4}; 5 6console.log( person.hasOwnProperty(\u0026#34;name\u0026#34;) ); 출구:\n1true 예 2:\n이 예제에서는 car 라는 객체를 선언하고 이에 door 라는 속성을 할당 하여 hasOwnProperty 를 사용 하여 이 속성을 확인할 수 있습니다.\n1var car = { 2 \u0026#34;doors\u0026#34;: 4, 3 \u0026#34;engine\u0026#34;: 2.0, 4 \u0026#34;color\u0026#34;: \u0026#34;black\u0026#34; 5}; 6 7var hasDoor = car.hasOwnProperty(\u0026#34;doors\u0026#34;); 8 9console.log(hasDoor); 출구:\n1true 예 3:\n여기서 우리는 hasOwnProperty 메서드가 false 를 반환 하도록 의도적으로 객체의 속성 이름의 철자를 틀리게 만들 것 입니다.\n1var shoppingCart = { 2 \u0026#34;fruits\u0026#34;: true, 3 \u0026#34;bread\u0026#34;: false 4}; 5 6var hasFruits = shoppingCart.hasOwnProperty(\u0026#34;fruites\u0026#34;); 7 8console.log(hasFruits); 출구:\n1false hasOwnProperty 메서드를 사용하는 것이 중요한 이유는 무엇입니까?\rJavaScript에서 객체 내에 속성이 존재하는지 확인하기 위해 hasOwnProperty 메서드를 사용하는 것의 중요성을 살펴보겠습니다 .\nJavaScript의 모든 것은 객체입니다.\r맞습니다. JavaScript로 생성된 모든 요소는 객체로 간주됩니다. 숫자, 텍스트 문자열, 배열 및 기타 JavaScript 데이터 유형은 상위 개체의 속성을 상속합니다.\n예 1:\nJavaScript의 숫자 데이터 유형은 객체로 간주됩니다.\n1var number = 10.22333; 2var otherNumber = number.toPrecision(3); 3 4console.log(otherNumber); 출구:\n110.2 예 2:\n문자열 데이터 형식도 개체로 간주됩니다.\n1var name = \u0026#34;Peter Max\u0026#34;; 2var char = name.charAt(2); 3 4console.log(char); 출구:\n1t 예 3:\nJavaScript의 배열조차도 객체입니다.\n1var cars = [\u0026#34;BMW\u0026#34;, \u0026#34;Audi\u0026#34;, \u0026#34;Aston Martin\u0026#34;]; 2 3var carIndexNumber = cars.indexOf(\u0026#34;BMW\u0026#34;); 4 5console.log(carIndexNumber); 출구:\n10 이전 예에서 모든 개체는 기본 개체인 Object의 속성을 상속합니다.\nJavaScript의 \u0026ldquo;in\u0026rdquo; 명령\r새로운 JavaScript 프로그래머는 일반적으로 in 명령 을 사용하여 주어진 객체에 속성이 있는지 확인합니다.\n예시:\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if (\u0026#34;engine\u0026#34; in car) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} 출구:\n1true 문제는 in 명령 이 포괄적이라는 것입니다. 개체의 모든 속성을 검색합니다. 사용자가 만든 속성과 상위 개체에서 상속된 속성이 검사에 포함됩니다.\n프로그래머가 개체 속성이 있는 경우에만 코드를 실행하면 논리 오류가 발생할 수 있습니다.\n그러나 프로그래머는 개체의 기본 속성을 확인하고 싶어? 아니면 사용자가 만든 속성입니까?\n예시:\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if (\u0026#34;toString\u0026#34; in car) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} 출구:\n1true 이전 예에서 in 명령은 true 를 반환 합니다. 즉, 이 속성이 우리가 선언하지 않은 경우에도 toString 속성 이 우리 객체에 있다고 가정합니다 .\ntoString 속성/메소드 는 상위 개체에서 상속됩니다. 이러한 혼란을 피하기 위해 항상 hasOwnProperty 메소드를 사용하십시오 .\n예시:\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if ( car.hasOwnProperty(\u0026#34;toString\u0026#34;) ) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} 출구:\n1false 이제 반환 값은 false 입니다. 이는 앞서 보았듯이 hasOwnProperty 메서드 가 사용자 정의 속성만 검색하기 때문입니다.\n","date":"2022년 02월 25일","img":"","permalink":"/ko/articles/javascript-hasownproperty/","series":null,"tags":["JavaScript"],"title":"JavaScript의 hasOwnProperty 메서드를 사용하는 방법 알아보기"}]