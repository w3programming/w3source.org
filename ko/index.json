[{"categories":null,"content":"jQuery에는 다른 요소 내부의 자식 요소만 제거하는 기능이 있습니다. \u0026ldquo;empty()\u0026rdquo; 메서드는 객체에서 직접 사용할 수 있습니다.\n아래 HTML 코드를 고려하십시오.\n1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;title\u0026gt;Lorem ipsum dolor sit amet\u0026lt;/title\u0026gt; 5\u0026lt;/head\u0026gt; 6\u0026lt;body\u0026gt; 7 \u0026lt;div id=\u0026#34;myDiv\u0026#34;\u0026gt; 8 \u0026lt;p\u0026gt;First paragraph\u0026lt;/p\u0026gt; 9 \u0026lt;p\u0026gt;Second paragraph\u0026lt;/p\u0026gt; 10 \u0026lt;p\u0026gt;Third paragraph\u0026lt;/p\u0026gt; 11 \u0026lt;p\u0026gt;Fourth paragraph\u0026lt;/p\u0026gt; 12 \u0026lt;/div\u0026gt; 13 \u0026lt;script src=\u0026#34;https://code.jquery.com/jquery-3.6.0.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 14\u0026lt;/body\u0026gt; 15\u0026lt;/html\u0026gt; \u0026ldquo;myDiv\u0026rdquo; 요소 내의 모든 단락을 제거하려면 jQuery에서 다음 코드를 사용하면 됩니다.\n1$(\u0026#34;#myDiv\u0026#34;).empty(); 그러나 JavaScript만 사용하여 이 동일한 작업을 어떻게 수행할 수 있습니까?\nJavaScript를 사용하여 DOM 노드에서 자식 요소 제거\rJavaScript를 사용하면 프로그래머가 다양한 속성을 통해 DOM 노드에서 요소를 제거할 수 있습니다. 각각을 사용하여 이 제거를 수행하는 방법을 알아보겠습니다.\ninnerHTML\r이러한 속성 중 하나는 \u0026ldquo;innerHTML\u0026quot;입니다. 요소의 모든 내부 HTML을 대체할 수 있습니다. 빈 문자열로 대체되는 것을 포함하여 해당 요소를 비어 있게 만듭니다.\n\u0026ldquo;myDiv\u0026rdquo; 요소 내의 모든 자식 노드를 제거하려면 다음 JavaScript를 사용하십시오.\n1document.getElementById(\u0026#34;myDiv\u0026#34;).innerHTML = \u0026#34;\u0026#34;; 아래에서 HTML의 전체 예를 볼 수 있습니다. 여기에서는 버튼을 사용하여 요소를 제거합니다.\n1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;title\u0026gt;Removing HTML elements using innerHTML\u0026lt;/title\u0026gt; 5 \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; 6\u0026lt;/head\u0026gt; 7\u0026lt;body\u0026gt; 8 \u0026lt;div id=\u0026#34;myDiv\u0026#34; style=\u0026#34;border: 3px dashed red; margin-bottom: 20px;\u0026#34;\u0026gt; 9 \u0026lt;p\u0026gt;First paragraph\u0026lt;/p\u0026gt; 10 \u0026lt;p\u0026gt;Second paragraph\u0026lt;/p\u0026gt; 11 \u0026lt;p\u0026gt;Third paragraph\u0026lt;/p\u0026gt; 12 \u0026lt;p\u0026gt;Fourth paragraph\u0026lt;/p\u0026gt; 13 \u0026lt;/div\u0026gt; 14 15 \u0026lt;button id=\u0026#39;removeElements\u0026#39;\u0026gt;Remove paragraphs (innerHTML)\u0026lt;/button\u0026gt; 16 17 \u0026lt;script\u0026gt; 18 const button = document.getElementById(\u0026#34;removeElements\u0026#34;); 19 button.onclick = function () { 20 document.getElementById(\u0026#34;myDiv\u0026#34;).innerHTML = \u0026#34;\u0026#34;; 21 }; 22 \u0026lt;/script\u0026gt; 23\u0026lt;/body\u0026gt; 24\u0026lt;/html\u0026gt; textContent\r\u0026ldquo;textContent\u0026rdquo; 속성은 노드 내부의 모든 요소를 ​​빈 문자열로 바꾸는 데 사용할 수 있습니다.\n브라우저에 따라 \u0026ldquo;textContent\u0026quot;를 사용하는 것이 \u0026ldquo;innerHTML\u0026quot;보다 성능이 더 좋을 수 있습니다.\n1document.getElementById(\u0026#34;myDiv\u0026#34;).textContent = \u0026#34;\u0026#34;; 루프를 사용하여 자식 요소 제거(\u0026ldquo;lastChild\u0026rdquo;)\r아래 예에서 \u0026ldquo;while\u0026rdquo; 루프를 사용하여 요소에 첫 번째 자식이 포함되어 있는지 확인합니다. true이면 부모 요소 내부에 하나 이상의 자식 요소가 있음을 나타내므로 루프는 마지막 요소를 제거합니다. 그리고 그 과정이 반복됩니다.\n\u0026ldquo;lastChild\u0026rdquo; 속성을 사용하여 마지막 요소를 제거하는 것이 \u0026ldquo;firstChild\u0026rdquo; 속성을 사용하여 첫 번째 요소를 제거하는 것보다 일반적으로 더 나은 성능을 보입니다.\n1const element = document.getElementById(\u0026#34;myDiv\u0026#34;); 2while (element.firstChild) { 3 element.removeChild(element.lastChild); 4} 루프를 사용하여 자식 요소 제거(\u0026ldquo;lastElementChild\u0026rdquo;)\r여기서 우리는 동일한 결과를 얻을 수 있지만 텍스트 노드 \u0026ldquo;#text\u0026rdquo; 및 주석 \u0026ldquo;\u0026lt;!\u0026ndash; comments \u0026ndash;\u0026gt;\u0026ldquo;와 같은 \u0026ldquo;비 요소\u0026quot;를 유지합니다.\n1const element = document.getElementById(\u0026#34;myDiv\u0026#34;); 2while (element.firstChild) { 3 element.removeChild(element.lastElementChild); 4} \u0026ldquo;lastElementChild\u0026quot;의 또 다른 기능은 직계 자손이 아닌 부모 요소 내의 자식 노드를 보존하는 것입니다.\n예를 들어, 아래 요소의 구조를 고려하십시오.\n1Parent element 2| 3 — First node 4| | 5| — Node 1 6| | 7| — Node 2 8| 9 — Second node \u0026ldquo;lastElementChild\u0026quot;를 사용할 때 \u0026ldquo;First node\u0026quot;와 \u0026ldquo;Second node\u0026quot;가 제거됩니다. \u0026ldquo;Node 1\u0026rdquo; 및 \u0026ldquo;Node 2\u0026quot;는 제거되지 않습니다.\n\u0026ldquo;remove\u0026rdquo; 메소드로 자식 요소 제거\r1const element = document.getElementById(\u0026#34;myDiv\u0026#34;); 2while (element.firstChild) { 3 element.lastChild.remove(); 4} \u0026ldquo;remove\u0026rdquo; 기능이 ES5에 추가되었습니다. 더 간단하고 직접적인 연결 구문이 있습니다. 이미 많은 브라우저에서 뛰어난 지원을 제공합니다\r.\n\u0026ldquo;replaceChildren\u0026rdquo; 메소드로 요소 제거\r\u0026ldquo;replaceChildren\u0026rdquo; API를 사용하여 DOM 노드에서 자식 요소를 제거할 수도 있습니다. 이 방법을 사용하면 부모 요소 내에서 요소를 제거할 수 있을 뿐만 아니라 한 번의 작업으로 다른 요소로 대체할 수 있습니다.\n하위 요소만 제거하려면 인수 없이 API를 호출하십시오.\n1const element = document.getElementById(\u0026#34;myDiv\u0026#34;); 2element.replaceChildren(); \u0026ldquo;replaceChildren\u0026rdquo; API는 이미 최신 브라우저에서 잘 지원됩니다\r.\n","date":"2022년 03월 05일","img":"","permalink":"https://w3source.org/ko/articles/javascript-equivalent-to-jquery-empty/","series":null,"tags":["JavaScript","jQuery"],"title":"jQuery.empty()와 동일한 바닐라 JavaScript 코드"},{"categories":null,"content":"많은 사용자가 jQuery를 사용하여 HTML DOM에 요소가 있는지 확인하는 방법에 대해 의구심을 가지고 있습니다. 간단히 말해서, 가능한 가장 간단한 방법으로 페이지에 요소가 있는지 확인하는 방법은 무엇입니까?\n이 결과를 얻기 위해 사용할 수 있는 몇 가지 방법이 있습니다. 그 중 하나는 요소 선택의 \u0026ldquo;길이\u0026rdquo; 속성이 0보다 큰 숫자를 반환하는지 확인하는 것입니다.\n예를 들어 아래에 표시된 것과 유사한 HTML이 있는 경우.\n1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;title\u0026gt;Lorem ipsum dolor\u0026lt;/title\u0026gt; 5 \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; 6\u0026lt;/head\u0026gt; 7\u0026lt;body\u0026gt; 8 \u0026lt;div id=\u0026#34;myDiv\u0026#34;\u0026gt;Lorem ipsum dolor sit amet.\u0026lt;/div\u0026gt; 9\u0026lt;/body\u0026gt; 10\u0026lt;/html\u0026gt; 그리고 \u0026ldquo;myDiv\u0026rdquo; 요소가 DOM에 있는지 확인하고 싶습니다. 즉, 페이지에서 다음 코드를 사용할 수 있습니다.\n1if ($(\u0026#34;#myDiv\u0026#34;).length \u0026gt; 0) { 2 console.log(\u0026#34;The element exists!\u0026#34;); 3} 코드 단순화\rJavaScript의 많은 것들이 true 또는 false이므로 \u0026ldquo;length\u0026rdquo; 속성의 반환도 true 또는 false로 간주될 수 있습니다. 반환값은 숫자이고 0은 \u0026ldquo;거짓\u0026quot;을 나타내고 나머지는 모두 \u0026ldquo;참\u0026quot;을 나타냅니다.\n따라서 다음과 같이 코드를 단순화할 수 있습니다.\n1if ($(\u0026#34;#myDiv\u0026#34;).length) { 2 console.log(\u0026#34;The element exists!\u0026#34;); 3} 비교 \u0026ldquo;\u0026gt; 0\u0026quot;을 제거해도 반환 값은 동일하게 유지됩니다.\njQuery를 위한 \u0026ldquo;exists\u0026rdquo; 함수 만들기\r조금 더 나아가 \u0026ldquo;exists\u0026quot;라는 함수를 추가할 수 있습니다. 이 함수는 우리가 확인하고자 하는 요소에 직접 사용할 수 있습니다.\n1jQuery.fn.exists = function() { 2 return ( $(this).length \u0026gt; 0); 3} 4 5var elementExists = $(\u0026#34;#myDiv\u0026#34;).exists(); 6 7console.log(elementExists); 우리는 훨씬 더 개선할 수 있고 방법이 연쇄 가능성을 나타내는 것을 방지할 수 있습니다. 이 경우에는 불가능합니다. 우리는 다음과 같이 할 것입니다.\n1jQuery.exists = function(selector) { 2 return ( $(selector).length \u0026gt; 0 ); 3} 4 5if ( $.exists(\u0026#34;#myDiv\u0026#34;) ) { 6 console.log(\u0026#34;The element exists!\u0026#34;); 7} 이제 객체에서 직접 체인을 시뮬레이션하는 대신 선택기를 \u0026ldquo;exists\u0026rdquo; 함수에 대한 인수로 전달합니다.\n배열을 사용하여 HTML 요소의 존재 확인\rjQuery에서 선택기를 사용하면 요소 배열을 반환합니다. 이 배열의 첫 번째 요소에 액세스하려고 시도하고 \u0026ldquo;정의되지 않음\u0026quot;을 반환하면 해당 요소가 DOM에 존재하지 않음을 나타냅니다.\n1if ( $(\u0026#39;#myDiv\u0026#39;)[0] ) { 2 console.log(\u0026#34;The element exists!\u0026#34;); 3} 보시다시피 페이지에 HTML 요소가 있는지 확인하는 방법에는 여러 가지가 있습니다. 최고는 무엇입니까? 글쎄, 당신의 문제를 해결하는 사람. 중요한 것은 코드가 실행되고 작동한다는 것입니다.\n","date":"2022년 03월 03일","img":"","permalink":"https://w3source.org/ko/articles/is-there-an-exists-function-for-jquery/","series":null,"tags":["JavaScript","jQuery"],"title":"jQuery에 'exists' 기능이 있습니까? (HTML 요소가 존재합니까?)"},{"categories":null,"content":"JavaScript의 hasOwnProperty 메서드 는 주어진 객체에 특정 속성이 있는지 확인하는 데 사용됩니다.\nhasOwnProperty 메서드로 확인된 속성 은 해당 개체의 내부에 있습니다. 즉, 사용자가 정의해야 합니다.\nhasOwnProperty 에 전달된 속성 이 객체에 존재하면 메서드는 true 를 반환하고 , 그렇지 않으면 false 를 반환합니다 .\n예 1:\n이 예제에서는 person 객체 를 만들고 name 속성 을 추가 한 다음 hasOwnProperty 를 사용하여 이 속성이 객체의 일부인지 확인합니다.\n1var person = { 2 \u0026#34;name\u0026#34;: \u0026#34;Brian\u0026#34;, 3 \u0026#34;lastName\u0026#34;: \u0026#34;Scott\u0026#34; 4}; 5 6console.log( person.hasOwnProperty(\u0026#34;name\u0026#34;) ); 출구:\n1true 예 2:\n이 예제에서는 car 라는 객체를 선언하고 이에 door 라는 속성을 할당 하여 hasOwnProperty 를 사용 하여 이 속성을 확인할 수 있습니다.\n1var car = { 2 \u0026#34;doors\u0026#34;: 4, 3 \u0026#34;engine\u0026#34;: 2.0, 4 \u0026#34;color\u0026#34;: \u0026#34;black\u0026#34; 5}; 6 7var hasDoor = car.hasOwnProperty(\u0026#34;doors\u0026#34;); 8 9console.log(hasDoor); 출구:\n1true 예 3:\n여기서 우리는 hasOwnProperty 메서드가 false 를 반환 하도록 의도적으로 객체의 속성 이름의 철자를 틀리게 만들 것 입니다.\n1var shoppingCart = { 2 \u0026#34;fruits\u0026#34;: true, 3 \u0026#34;bread\u0026#34;: false 4}; 5 6var hasFruits = shoppingCart.hasOwnProperty(\u0026#34;fruites\u0026#34;); 7 8console.log(hasFruits); 출구:\n1false hasOwnProperty 메서드를 사용하는 것이 중요한 이유는 무엇입니까?\rJavaScript에서 객체 내에 속성이 존재하는지 확인하기 위해 hasOwnProperty 메서드를 사용하는 것의 중요성을 살펴보겠습니다 .\nJavaScript의 모든 것은 객체입니다.\r맞습니다. JavaScript로 생성된 모든 요소는 객체로 간주됩니다. 숫자, 텍스트 문자열, 배열 및 기타 JavaScript 데이터 유형은 상위 개체의 속성을 상속합니다.\n예 1:\nJavaScript의 숫자 데이터 유형은 객체로 간주됩니다.\n1var number = 10.22333; 2var otherNumber = number.toPrecision(3); 3 4console.log(otherNumber); 출구:\n110.2 예 2:\n문자열 데이터 형식도 개체로 간주됩니다.\n1var name = \u0026#34;Peter Max\u0026#34;; 2var char = name.charAt(2); 3 4console.log(char); 출구:\n1t 예 3:\nJavaScript의 배열조차도 객체입니다.\n1var cars = [\u0026#34;BMW\u0026#34;, \u0026#34;Audi\u0026#34;, \u0026#34;Aston Martin\u0026#34;]; 2 3var carIndexNumber = cars.indexOf(\u0026#34;BMW\u0026#34;); 4 5console.log(carIndexNumber); 출구:\n10 이전 예에서 모든 개체는 기본 개체인 Object의 속성을 상속합니다.\nJavaScript의 \u0026ldquo;in\u0026rdquo; 명령\r새로운 JavaScript 프로그래머는 일반적으로 in 명령 을 사용하여 주어진 객체에 속성이 있는지 확인합니다.\n예시:\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if (\u0026#34;engine\u0026#34; in car) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} 출구:\n1true 문제는 in 명령 이 포괄적이라는 것입니다. 개체의 모든 속성을 검색합니다. 사용자가 만든 속성과 상위 개체에서 상속된 속성이 검사에 포함됩니다.\n프로그래머가 개체 속성이 있는 경우에만 코드를 실행하면 논리 오류가 발생할 수 있습니다.\n그러나 프로그래머는 개체의 기본 속성을 확인하고 싶어? 아니면 사용자가 만든 속성입니까?\n예시:\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if (\u0026#34;toString\u0026#34; in car) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} 출구:\n1true 이전 예에서 in 명령은 true 를 반환 합니다. 즉, 이 속성이 우리가 선언하지 않은 경우에도 toString 속성 이 우리 객체에 있다고 가정합니다 .\ntoString 속성/메소드 는 상위 개체에서 상속됩니다. 이러한 혼란을 피하기 위해 항상 hasOwnProperty 메소드를 사용하십시오 .\n예시:\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if ( car.hasOwnProperty(\u0026#34;toString\u0026#34;) ) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} 출구:\n1false 이제 반환 값은 false 입니다. 이는 앞서 보았듯이 hasOwnProperty 메서드 가 사용자 정의 속성만 검색하기 때문입니다.\n","date":"2022년 02월 25일","img":"","permalink":"https://w3source.org/ko/articles/javascript-hasownproperty/","series":null,"tags":["JavaScript"],"title":"JavaScript의 hasOwnProperty 메서드를 사용하는 방법 알아보기"}]