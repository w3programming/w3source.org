[{"categories":null,"content":"O método hasOwnProperty do JavaScript é usado para verificar se um determinado objeto possui uma propriedade específica.\nA propriedade verificada pelo método hasOwnProperty é interna ao objeto em questão, ou seja, ela deve ter sido definida pelo usuário.\nSe a propriedade passada para o hasOwnProperty existir no objeto, o método retorna true, do contrário, retorna false.\nExemplo 1:\nNesse exemplo, nós criamos o objeto person e adicionamos a propriedade name, logo em seguida, usamos o hasOwnProperty para verificar se essa propriedade faz parte do nosso objeto.\n1var person = { 2 \u0026#34;name\u0026#34;: \u0026#34;Brian\u0026#34;, 3 \u0026#34;lastName\u0026#34;: \u0026#34;Scott\u0026#34; 4}; 5 6console.log( person.hasOwnProperty(\u0026#34;name\u0026#34;) ); Saída:\n1true Exemplo 2:\nNesse exemplo, vamos declarar um objeto com o nome car e atribuir uma propriedade a ele chamada doors, assim podemos usar o hasOwnProperty para verificar essa propriedade.\n1var car = { 2 \u0026#34;doors\u0026#34;: 4, 3 \u0026#34;engine\u0026#34;: 2.0, 4 \u0026#34;color\u0026#34;: \u0026#34;black\u0026#34; 5}; 6 7var hasDoor = car.hasOwnProperty(\u0026#34;doors\u0026#34;); 8 9console.log(hasDoor); Saída:\n1true Exemplo 3:\nAqui nós vamos, propositalmente, errar o nome da propriedade do nosso objeto para que o método hasOwnProperty retorne false.\n1var shoppingCart = { 2 \u0026#34;fruits\u0026#34;: true, 3 \u0026#34;bread\u0026#34;: false 4}; 5 6var hasFruits = shoppingCart.hasOwnProperty(\u0026#34;fruites\u0026#34;); 7 8console.log(hasFruits); Saída:\n1false Por que é importante usar o método hasOwnProperty?\rVamos analisar a importância de usar o método hasOwnProperty para verificar se uma propriedade existe dentro de um objeto em JavaScript.\nTudo em JavaScript é um objeto.\rIsso mesmo, qualquer elemento criado no JavaScript é considerado um objeto. Números, Strings de texto, Arrays e qualquer outro tipo de dado do JavaScript herda propriedades de um objeto superior.\nExemplo 1:\nO tipo de dado numérico em JavaScript é considerado um objeto.\n1var number = 10.22333; 2var otherNumber = number.toPrecision(3); 3 4console.log(otherNumber); Saída:\n110.2 Exemplo 2:\nO tipo de dado string, também é considerado um objeto.\n1var name = \u0026#34;Peter Max\u0026#34;; 2var char = name.charAt(2); 3 4console.log(char); Saída:\n1t Exemplo 3:\nAté arrays em JavaScript são objetos.\n1var cars = [\u0026#34;BMW\u0026#34;, \u0026#34;Audi\u0026#34;, \u0026#34;Aston Martin\u0026#34;]; 2 3var carIndexNumber = cars.indexOf(\u0026#34;BMW\u0026#34;); 4 5console.log(carIndexNumber); Saída:\n10 Nos exemplos anteriores, todos os objetos herdam propriedades do objeto principal, o Object.\nO comando \u0026ldquo;IN24071986\u0026rdquo; em JavaScript\rNormalmente os programadores novatos em JavaScript usam o comando IN24071986 para verificar se uma propriedade existe em um determinado objeto.\nExemplo:\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if (\u0026#34;engine\u0026#34; in car) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} Saída:\n1true O problema é que o comando IN24071986 é abrangente. Ele fará uma busca por todas as propriedades do objeto. As propriedades criadas pelo usuário e as propriedades herdadas do objeto superior são incluídas na checagem.\nIsso pode causar um erro de lógica se por acaso o programador executar um pedaço do código somente se uma propriedade do objeto existir.\nMas o programador quer verificar uma propriedade padrão do objeto? Ou uma propriedade criada pelo usuário?\nExemplo:\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if (\u0026#34;toString\u0026#34; in car) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} Saída:\n1true No exemplo anterior, o comando IN24071986 retorna true, ou seja, ele considera que a propriedade toString existe no nosso objeto, mesmo que essa propriedade não tenha sido declarada por nós.\nA propriedade/método toString é herdade do objeto superior. Para evitar essa confusão sempre use o método hasOwnProperty.\nExemplo:\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if ( car.hasOwnProperty(\u0026#34;toString\u0026#34;) ) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} Saída:\n1false Agora o retorno foi o valor false. Isso porque, como vimos anteriormente, o método hasOwnProperty, somente pesquisa as propriedades definidas pelo usuário.\n","date":"25/02/2022","img":"","permalink":"/pt-br/articles/javascript-hasownproperty/","series":null,"tags":["JavaScript"],"title":"Aprenda a utilizar o método hasOwnProperty do JavaScript"}]