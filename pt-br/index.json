[{"categories":null,"content":"O jQuery possui uma função destinada somente para remover todos os elementos filhos de dentro de outro elemento. O método \u0026ldquo;empty()\u0026rdquo; pode ser utilizado diretamente no objeto.\nConsidere o código HTML abaixo.\n1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;title\u0026gt;Lorem ipsum dolor sit amet\u0026lt;/title\u0026gt; 5\u0026lt;/head\u0026gt; 6\u0026lt;body\u0026gt; 7 \u0026lt;div id=\u0026#34;myDiv\u0026#34;\u0026gt; 8 \u0026lt;p\u0026gt;First paragraph\u0026lt;/p\u0026gt; 9 \u0026lt;p\u0026gt;Second paragraph\u0026lt;/p\u0026gt; 10 \u0026lt;p\u0026gt;Third paragraph\u0026lt;/p\u0026gt; 11 \u0026lt;p\u0026gt;Fourth paragraph\u0026lt;/p\u0026gt; 12 \u0026lt;/div\u0026gt; 13 \u0026lt;script src=\u0026#34;https://code.jquery.com/jquery-3.6.0.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 14\u0026lt;/body\u0026gt; 15\u0026lt;/html\u0026gt; Para remover todos os parágrafos de dentro do elemento \u0026ldquo;myDiv\u0026rdquo; basta usar o seguinte código em jQuery.\n1$(\u0026#34;#myDiv\u0026#34;).empty(); Mas como podemos executar essa mesma operação usando somente o JavaScript?\nRemovendo elementos filhos de um nó DOM usando JavaScript\rO JavaScript permite que o programador remova elementos de um nó DOM através de diversas propriedades. Vamos aprender como fazer essa remoção usando cada uma delas.\ninnerHTML\rUma dessas propriedades é o \u0026ldquo;innerHTML\u0026rdquo;. Ela permite que todo o HTML interno do elemento seja substituído. Inclusive por uma string vazia, fazendo com que o elemento em questão fique vazio.\nPara remover todos os nós filhos de dentro do elemento \u0026ldquo;myDiv\u0026rdquo; use o seguinte JavaScript.\n1document.getElementById(\u0026#34;myDiv\u0026#34;).innerHTML = \u0026#34;\u0026#34;; Abaixo, você confere um exemplo completo em HTML. Aqui nós usamos um botão para remover os elementos.\n1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;title\u0026gt;Removing HTML elements using innerHTML\u0026lt;/title\u0026gt; 5 \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; 6\u0026lt;/head\u0026gt; 7\u0026lt;body\u0026gt; 8 \u0026lt;div id=\u0026#34;myDiv\u0026#34; style=\u0026#34;border: 3px dashed red; margin-bottom: 20px;\u0026#34;\u0026gt; 9 \u0026lt;p\u0026gt;First paragraph\u0026lt;/p\u0026gt; 10 \u0026lt;p\u0026gt;Second paragraph\u0026lt;/p\u0026gt; 11 \u0026lt;p\u0026gt;Third paragraph\u0026lt;/p\u0026gt; 12 \u0026lt;p\u0026gt;Fourth paragraph\u0026lt;/p\u0026gt; 13 \u0026lt;/div\u0026gt; 14 15 \u0026lt;button id=\u0026#39;removeElements\u0026#39;\u0026gt;Remove paragraphs (innerHTML)\u0026lt;/button\u0026gt; 16 17 \u0026lt;script\u0026gt; 18 const button = document.getElementById(\u0026#34;removeElements\u0026#34;); 19 button.onclick = function () { 20 document.getElementById(\u0026#34;myDiv\u0026#34;).innerHTML = \u0026#34;\u0026#34;; 21 }; 22 \u0026lt;/script\u0026gt; 23\u0026lt;/body\u0026gt; 24\u0026lt;/html\u0026gt; textContent\rA propriedade \u0026ldquo;textContent\u0026rdquo; pode ser usada para substituir todos os elementos de dentro de um nó por uma string vazia.\nDependendo do navegador, o uso do \u0026ldquo;textContent\u0026rdquo; pode ter um desempenho melhor do que o \u0026ldquo;innerHTML\u0026rdquo;.\n1document.getElementById(\u0026#34;myDiv\u0026#34;).textContent = \u0026#34;\u0026#34;; Remover elementos filhos usando um loop (\u0026ldquo;lastChild\u0026rdquo;)\rNo exemplo abaixo, nós usamos o loop \u0026ldquo;while\u0026rdquo; para checar se dentro do nosso elemento existe o primeiro filho. Caso seja verdadeiro, indica que há pelo menos um elemento filho dentro do elemento superior, então o loop remove o último elemento. E o processo é repetido.\nRemover o último elemento \u0026ldquo;lastChild\u0026rdquo; normalmente tem um desempenho superior ao invés de remover o primeiro elemento \u0026ldquo;firstChild\u0026rdquo;.\n1const element = document.getElementById(\u0026#34;myDiv\u0026#34;); 2while (element.firstChild) { 3 element.removeChild(element.lastChild); 4} Remover elementos filhos usando um loop (\u0026ldquo;lastElementChild\u0026rdquo;)\rAqui nós obteremos o mesmo resultado, porém preservando \u0026ldquo;non-Elements\u0026rdquo; como nós de texto \u0026ldquo;#text\u0026rdquo; e comentários \u0026ldquo;\u0026lt;!\u0026ndash; comments \u0026ndash;\u0026gt;\u0026rdquo;.\n1const element = document.getElementById(\u0026#34;myDiv\u0026#34;); 2while (element.firstChild) { 3 element.removeChild(element.lastElementChild); 4} Outra característica do \u0026ldquo;lastElementChild\u0026rdquo; é preservar nós filhos dentro do elemento pai que não são descendentes diretos.\nPor exemplo, considere a estrutura de elementos abaixo.\n1Parent element 2| 3 — First node 4| | 5| — Node 1 6| | 7| — Node 2 8| 9 — Second node Ao usar \u0026ldquo;lastElementChild\u0026rdquo;, o \u0026ldquo;First node\u0026rdquo; e o \u0026ldquo;Second node\u0026rdquo; seriam removidos. Já o \u0026ldquo;Node 1\u0026rdquo; e o \u0026ldquo;Node 2\u0026rdquo; não seriam removidos.\nRemover elementos filhos com o método \u0026ldquo;remove\u0026rdquo;\r1const element = document.getElementById(\u0026#34;myDiv\u0026#34;); 2while (element.firstChild) { 3 element.lastChild.remove(); 4} A função \u0026ldquo;remove\u0026rdquo; foi adicionada no ES5. Possui uma sintaxe mais simples e direta em forma de encadeamento. Já possui um suporte excelente em diversos navegadores\r.\nRemover elementos com o método \u0026ldquo;replaceChildren\u0026rdquo;\rHá também a possibilidade de remover os elementos filhos de um nó DOM usando a API \u0026ldquo;replaceChildren\u0026rdquo;. Esse método permite não só remover os elementos de dentro de um elemento pai, mas também substituí-los por outros elementos em apenas uma operação.\nPara somente remover os elementos filhos, use a API sem nenhum argumento.\n1const element = document.getElementById(\u0026#34;myDiv\u0026#34;); 2element.replaceChildren(); A API \u0026ldquo;replaceChildren\u0026rdquo; já conta com um bom suporte entre os navegadores modernos\r.\n","date":"05/03/2022","img":"","permalink":"https://w3source.org/pt-br/articles/javascript-equivalent-to-jquery-empty/","series":null,"tags":["JavaScript","jQuery"],"title":"Código em JavaScript Vanilla Equivalente ao jQuery.empty()"},{"categories":null,"content":"Muitos usuários têm dúvidas em como checar se um elemento existe no DOM HTML usando o jQuery. Em poucas palavras, como verificar se um elemento existe na página da forma mais simples possível?\nExistem diversas maneiras que podemos utilizar para alcançar esse resultado. Uma delas é verificar se a propriedade \u0026ldquo;length\u0026rdquo; do seletor do elemento retorna um número maior que 0.\nPor exemplo, se tivermos um HTML semelhante ao apresentado abaixo.\n1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;title\u0026gt;Lorem ipsum dolor\u0026lt;/title\u0026gt; 5 \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; 6\u0026lt;/head\u0026gt; 7\u0026lt;body\u0026gt; 8 \u0026lt;div id=\u0026#34;myDiv\u0026#34;\u0026gt;Lorem ipsum dolor sit amet.\u0026lt;/div\u0026gt; 9\u0026lt;/body\u0026gt; 10\u0026lt;/html\u0026gt; E queremos verificar se o elemento \u0026ldquo;myDiv\u0026rdquo; existe no DOM, ou seja, na página, podemos usar o seguinte código.\n1if ($(\u0026#34;#myDiv\u0026#34;).length \u0026gt; 0) { 2 console.log(\u0026#34;The element exists!\u0026#34;); 3} Simplificando o código\rComo muitas coisas em JavaScript são verdadeiras ou falsas, o retorno da propriedade \u0026ldquo;length\u0026rdquo; pode ser considerado verdadeiro ou falso também. O retorno é um número, 0 representa \u0026ldquo;false\u0026rdquo; e todo o resto representa \u0026ldquo;true\u0026rdquo;.\nEntão podemos simplificar o código da seguinte maneira.\n1if ($(\u0026#34;#myDiv\u0026#34;).length) { 2 console.log(\u0026#34;The element exists!\u0026#34;); 3} Mesmo removendo o comparativo \u0026ldquo;\u0026gt; 0\u0026rdquo;, o valor de retorno continua o mesmo.\nCriando uma função “exists” para o jQuery\rPodemos ir um pouco mais além e adicionar uma função com o nome “exists”. Essa função pode ser usada diretamente com o elemento que queremos verificar.\n1jQuery.fn.exists = function() { 2 return ( $(this).length \u0026gt; 0); 3} 4 5var elementExists = $(\u0026#34;#myDiv\u0026#34;).exists(); 6 7console.log(elementExists); Podemos melhorar ainda mais e evitar que o método represente uma possibilidade de encadeamento. O que não é possível nesse caso. Faremos da seguinte forma então.\n1jQuery.exists = function(selector) { 2 return ( $(selector).length \u0026gt; 0 ); 3} 4 5if ( $.exists(\u0026#34;#myDiv\u0026#34;) ) { 6 console.log(\u0026#34;The element exists!\u0026#34;); 7} Perceba que agora nós passamos o seletor como argumento para a função \u0026ldquo;exists\u0026rdquo;, ao invés de simular um encadeamento diretamente do objeto.\nVerificando a existência de um elemento HTML usando a sintaxe de array\rQuando usamos um seletor no jQuery, esse retorna um vetor de elementos. Se tentarmos acessar o primeiro elemento desse vetor e ele retorna \u0026ldquo;undefined\u0026rdquo;, indica que o elemento em questão não existe no DOM.\n1if ( $(\u0026#39;#myDiv\u0026#39;)[0] ) { 2 console.log(\u0026#34;The element exists!\u0026#34;); 3} Como você pode ver, existem diversas formas de verificar a existência de um elemento HTML na página. Qual a melhor? Bom, aquela que solucionar o seu problema. O importante é que seu código esteja rodando e funcionando.\n","date":"03/03/2022","img":"","permalink":"https://w3source.org/pt-br/articles/is-there-an-exists-function-for-jquery/","series":null,"tags":["JavaScript","jQuery"],"title":"Existe uma função 'exists' no jQuery? (Elemento HTML existe?)"},{"categories":null,"content":"O método hasOwnProperty do JavaScript é usado para verificar se um determinado objeto possui uma propriedade específica.\nA propriedade verificada pelo método hasOwnProperty é interna ao objeto em questão, ou seja, ela deve ter sido definida pelo usuário.\nSe a propriedade passada para o hasOwnProperty existir no objeto, o método retorna true, do contrário, retorna false.\nExemplo 1:\nNesse exemplo, nós criamos o objeto person e adicionamos a propriedade name, logo em seguida, usamos o hasOwnProperty para verificar se essa propriedade faz parte do nosso objeto.\n1var person = { 2 \u0026#34;name\u0026#34;: \u0026#34;Brian\u0026#34;, 3 \u0026#34;lastName\u0026#34;: \u0026#34;Scott\u0026#34; 4}; 5 6console.log( person.hasOwnProperty(\u0026#34;name\u0026#34;) ); Saída:\n1true Exemplo 2:\nNesse exemplo, vamos declarar um objeto com o nome car e atribuir uma propriedade a ele chamada doors, assim podemos usar o hasOwnProperty para verificar essa propriedade.\n1var car = { 2 \u0026#34;doors\u0026#34;: 4, 3 \u0026#34;engine\u0026#34;: 2.0, 4 \u0026#34;color\u0026#34;: \u0026#34;black\u0026#34; 5}; 6 7var hasDoor = car.hasOwnProperty(\u0026#34;doors\u0026#34;); 8 9console.log(hasDoor); Saída:\n1true Exemplo 3:\nAqui nós vamos, propositalmente, errar o nome da propriedade do nosso objeto para que o método hasOwnProperty retorne false.\n1var shoppingCart = { 2 \u0026#34;fruits\u0026#34;: true, 3 \u0026#34;bread\u0026#34;: false 4}; 5 6var hasFruits = shoppingCart.hasOwnProperty(\u0026#34;fruites\u0026#34;); 7 8console.log(hasFruits); Saída:\n1false Por que é importante usar o método hasOwnProperty?\rVamos analisar a importância de usar o método hasOwnProperty para verificar se uma propriedade existe dentro de um objeto em JavaScript.\nTudo em JavaScript é um objeto.\rIsso mesmo, qualquer elemento criado no JavaScript é considerado um objeto. Números, Strings de texto, Arrays e qualquer outro tipo de dado do JavaScript herda propriedades de um objeto superior.\nExemplo 1:\nO tipo de dado numérico em JavaScript é considerado um objeto.\n1var number = 10.22333; 2var otherNumber = number.toPrecision(3); 3 4console.log(otherNumber); Saída:\n110.2 Exemplo 2:\nO tipo de dado string, também é considerado um objeto.\n1var name = \u0026#34;Peter Max\u0026#34;; 2var char = name.charAt(2); 3 4console.log(char); Saída:\n1t Exemplo 3:\nAté arrays em JavaScript são objetos.\n1var cars = [\u0026#34;BMW\u0026#34;, \u0026#34;Audi\u0026#34;, \u0026#34;Aston Martin\u0026#34;]; 2 3var carIndexNumber = cars.indexOf(\u0026#34;BMW\u0026#34;); 4 5console.log(carIndexNumber); Saída:\n10 Nos exemplos anteriores, todos os objetos herdam propriedades do objeto principal, o Object.\nO comando \u0026ldquo;in\u0026rdquo; em JavaScript\rNormalmente os programadores novatos em JavaScript usam o comando in para verificar se uma propriedade existe em um determinado objeto.\nExemplo:\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if (\u0026#34;engine\u0026#34; in car) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} Saída:\n1true O problema é que o comando in é abrangente. Ele fará uma busca por todas as propriedades do objeto. As propriedades criadas pelo usuário e as propriedades herdadas do objeto superior são incluídas na checagem.\nIsso pode causar um erro de lógica se por acaso o programador executar um pedaço do código somente se uma propriedade do objeto existir.\nMas o programador quer verificar uma propriedade padrão do objeto? Ou uma propriedade criada pelo usuário?\nExemplo:\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if (\u0026#34;toString\u0026#34; in car) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} Saída:\n1true No exemplo anterior, o comando in retorna true, ou seja, ele considera que a propriedade toString existe no nosso objeto, mesmo que essa propriedade não tenha sido declarada por nós.\nA propriedade/método toString é herdade do objeto superior. Para evitar essa confusão sempre use o método hasOwnProperty.\nExemplo:\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if ( car.hasOwnProperty(\u0026#34;toString\u0026#34;) ) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} Saída:\n1false Agora o retorno foi o valor false. Isso porque, como vimos anteriormente, o método hasOwnProperty, somente pesquisa as propriedades definidas pelo usuário.\n","date":"25/02/2022","img":"","permalink":"https://w3source.org/pt-br/articles/javascript-hasownproperty/","series":null,"tags":["JavaScript"],"title":"Aprenda a utilizar o método hasOwnProperty do JavaScript"}]