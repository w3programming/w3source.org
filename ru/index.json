[{"categories":null,"content":"Метод JavaScript hasOwnProperty используется для проверки того, имеет ли данный объект определенное свойство.\nСвойство, проверяемое методом hasOwnProperty, является внутренним для рассматриваемого объекта, то есть оно должно быть определено пользователем.\nЕсли свойство, переданное hasOwnProperty, существует в объекте, метод возвращает true, в противном случае он возвращает false .\nПример 1:\nВ этом примере мы создаем объект человека и добавляем свойство name, затем мы используем hasOwnProperty, чтобы убедиться, что это свойство является частью нашего объекта.\n1var person = { 2 \u0026#34;name\u0026#34;: \u0026#34;Brian\u0026#34;, 3 \u0026#34;lastName\u0026#34;: \u0026#34;Scott\u0026#34; 4}; 5 6console.log( person.hasOwnProperty(\u0026#34;name\u0026#34;) ); Выход:\n1true Пример 2:\nВ этом примере мы собираемся объявить объект с именем car и присвоить ему свойство с именем door, поэтому мы можем использовать hasOwnProperty для проверки этого свойства.\n1var car = { 2 \u0026#34;doors\u0026#34;: 4, 3 \u0026#34;engine\u0026#34;: 2.0, 4 \u0026#34;color\u0026#34;: \u0026#34;black\u0026#34; 5}; 6 7var hasDoor = car.hasOwnProperty(\u0026#34;doors\u0026#34;); 8 9console.log(hasDoor); Выход:\n1true Пример 3:\nЗдесь мы намеренно напишем имя свойства нашего объекта с ошибкой, чтобы метод hasOwnProperty возвращал false .\n1var shoppingCart = { 2 \u0026#34;fruits\u0026#34;: true, 3 \u0026#34;bread\u0026#34;: false 4}; 5 6var hasFruits = shoppingCart.hasOwnProperty(\u0026#34;fruites\u0026#34;); 7 8console.log(hasFruits); Выход:\n1false Почему важно использовать метод hasOwnProperty?\rДавайте рассмотрим важность использования метода hasOwnProperty для проверки существования свойства внутри объекта в JavaScript.\nВсе в JavaScript является объектом.\rПравильно, любой элемент, созданный в JavaScript, считается объектом. Числа, текстовые строки, массивы и любые другие типы данных JavaScript наследуют свойства родительского объекта.\nПример 1:\nЧисловой тип данных в JavaScript считается объектом.\n1var number = 10.22333; 2var otherNumber = number.toPrecision(3); 3 4console.log(otherNumber); Выход:\n110.2 Пример 2:\nСтроковый тип данных также считается объектом.\n1var name = \u0026#34;Peter Max\u0026#34;; 2var char = name.charAt(2); 3 4console.log(char); Выход:\n1t Пример 3:\nДаже массивы в JavaScript являются объектами.\n1var cars = [\u0026#34;BMW\u0026#34;, \u0026#34;Audi\u0026#34;, \u0026#34;Aston Martin\u0026#34;]; 2 3var carIndexNumber = cars.indexOf(\u0026#34;BMW\u0026#34;); 4 5console.log(carIndexNumber); Выход:\n10 В предыдущих примерах все объекты наследуют свойства основного объекта Object.\nКоманда «in» в JavaScript\rНовые программисты JavaScript обычно используют команду in, чтобы проверить, существует ли свойство для данного объекта.\nПример:\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if (\u0026#34;engine\u0026#34; in car) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} Выход:\n1true Проблема в том, что команда in является исчерпывающей. Он будет выполнять поиск по всем свойствам объекта. В проверку включаются созданные пользователем свойства и свойства, унаследованные от родительского объекта.\nЭто может вызвать логическую ошибку, если программист запустит часть кода, только если свойство объекта существует.\nНо программист хочет проверить свойство объекта по умолчанию? Или свойство, созданное пользователем?\nПример:\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if (\u0026#34;toString\u0026#34; in car) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} Выход:\n1true В предыдущем примере команда in возвращает true, то есть предполагает, что свойство toString существует в нашем объекте, хотя это свойство нами не было объявлено.\nСвойство/метод toString наследуется от родительского объекта. Чтобы избежать этой путаницы, всегда используйте метод hasOwnProperty .\nПример:\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if ( car.hasOwnProperty(\u0026#34;toString\u0026#34;) ) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} Выход:\n1false Теперь возвращаемым значением было значение false . Это связано с тем, что, как мы видели ранее, метод hasOwnProperty ищет только определенные пользователем свойства.\n","date":"25.02.2022","img":"","permalink":"/ru/articles/javascript-hasownproperty/","series":null,"tags":["JavaScript"],"title":"Узнайте, как использовать метод JavaScript hasOwnProperty"}]