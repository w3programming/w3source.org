[{"categories":null,"content":"jQuery 具有仅用于从另一个元素中删除子元素的功能。“empty()”方法可以直接在对象上使用。\n考虑下面的 HTML 代码。\n1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;title\u0026gt;Lorem ipsum dolor sit amet\u0026lt;/title\u0026gt; 5\u0026lt;/head\u0026gt; 6\u0026lt;body\u0026gt; 7 \u0026lt;div id=\u0026#34;myDiv\u0026#34;\u0026gt; 8 \u0026lt;p\u0026gt;First paragraph\u0026lt;/p\u0026gt; 9 \u0026lt;p\u0026gt;Second paragraph\u0026lt;/p\u0026gt; 10 \u0026lt;p\u0026gt;Third paragraph\u0026lt;/p\u0026gt; 11 \u0026lt;p\u0026gt;Fourth paragraph\u0026lt;/p\u0026gt; 12 \u0026lt;/div\u0026gt; 13 \u0026lt;script src=\u0026#34;https://code.jquery.com/jquery-3.6.0.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 14\u0026lt;/body\u0026gt; 15\u0026lt;/html\u0026gt; 要删除“myDiv”元素中的所有段落，只需在 jQuery 中使用以下代码。\n1$(\u0026#34;#myDiv\u0026#34;).empty(); 但是我们如何只使用 JavaScript 来执行同样的操作呢？\n使用 JavaScript 从 DOM 节点中删除子元素\rJavaScript 允许程序员通过各种属性从 DOM 节点中删除元素。让我们学习如何使用它们中的每一个来进行此删除。\ninnerHTML\r这些属性之一是“innerHTML”。它允许替换所有元素的内部 HTML。包括被一个空字符串替换，使有问题的元素为空。\n要删除“myDiv”元素内的所有子节点，请使用以下 JavaScript。\n1document.getElementById(\u0026#34;myDiv\u0026#34;).innerHTML = \u0026#34;\u0026#34;; 您可以在下面看到一个完整的 HTML 示例。这里我们使用一个按钮来移除元素。\n1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;title\u0026gt;Removing HTML elements using innerHTML\u0026lt;/title\u0026gt; 5 \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; 6\u0026lt;/head\u0026gt; 7\u0026lt;body\u0026gt; 8 \u0026lt;div id=\u0026#34;myDiv\u0026#34; style=\u0026#34;border: 3px dashed red; margin-bottom: 20px;\u0026#34;\u0026gt; 9 \u0026lt;p\u0026gt;First paragraph\u0026lt;/p\u0026gt; 10 \u0026lt;p\u0026gt;Second paragraph\u0026lt;/p\u0026gt; 11 \u0026lt;p\u0026gt;Third paragraph\u0026lt;/p\u0026gt; 12 \u0026lt;p\u0026gt;Fourth paragraph\u0026lt;/p\u0026gt; 13 \u0026lt;/div\u0026gt; 14 15 \u0026lt;button id=\u0026#39;removeElements\u0026#39;\u0026gt;Remove paragraphs (innerHTML)\u0026lt;/button\u0026gt; 16 17 \u0026lt;script\u0026gt; 18 const button = document.getElementById(\u0026#34;removeElements\u0026#34;); 19 button.onclick = function () { 20 document.getElementById(\u0026#34;myDiv\u0026#34;).innerHTML = \u0026#34;\u0026#34;; 21 }; 22 \u0026lt;/script\u0026gt; 23\u0026lt;/body\u0026gt; 24\u0026lt;/html\u0026gt; textContent\r“textContent”属性可用于将节点内的所有元素替换为空字符串。\n根据浏览器的不同，使用“textContent”可能比“innerHTML”执行得更好。\n1document.getElementById(\u0026#34;myDiv\u0026#34;).textContent = \u0026#34;\u0026#34;; 使用循环删除子元素（“lastChild”）\r在下面的示例中，我们使用“while”循环来检查我们的元素是否包含第一个子元素。如果为真，则表示父元素内至少有一个子元素，因此循环删除最后一个元素。并且重复该过程。\n使用“lastChild”属性删除最后一个元素通常比使用“firstChild”属性删除第一个元素执行得更好。\n1const element = document.getElementById(\u0026#34;myDiv\u0026#34;); 2while (element.firstChild) { 3 element.removeChild(element.lastChild); 4} 使用循环删除子元素（“lastElementChild”）\r在这里，我们将获得相同的结果，但保留“非元素”，例如文本节点“#text”和注释“\u0026lt;!\u0026ndash; comments \u0026ndash;\u0026gt;”。\n1const element = document.getElementById(\u0026#34;myDiv\u0026#34;); 2while (element.firstChild) { 3 element.removeChild(element.lastElementChild); 4} “lastElementChild”的另一个特性是在父元素中保留不是直接后代的子节点。\n例如，考虑以下元素的结构。\n1Parent element 2| 3 — First node 4| | 5| — Node 1 6| | 7| — Node 2 8| 9 — Second node 使用“lastElementChild”时，“First node”和“Second node”将被删除。“Node 1”和“Node 2”不会被删除。\n使用“remove”方法删除子元素\r1const element = document.getElementById(\u0026#34;myDiv\u0026#34;); 2while (element.firstChild) { 3 element.lastChild.remove(); 4} ES5 中添加了“remove”功能。它具有更简单和更直接的链接语法。它已经在许多浏览器中得到了很好的支持\r。\n使用“replaceChildren”方法删除元素\r还可以使用“replaceChildren”API 从 DOM 节点中删除子元素。此方法不仅允许您从父元素中删除元素，还可以在一次操作中将它们替换为其他元素。\n要仅删除子元素，请在不带任何参数的情况下调用 API。\n1const element = document.getElementById(\u0026#34;myDiv\u0026#34;); 2element.replaceChildren(); 现代浏览器已经很好地支持\r“replaceChildren”API 。\n","date":"2022年03月05日","img":"","permalink":"https://w3source.org/zh-cn/articles/javascript-equivalent-to-jquery-empty/","series":null,"tags":["JavaScript","jQuery"],"title":"Vanilla JavaScript 代码等价于 jQuery.empty()"},{"categories":null,"content":"许多用户对如何使用 jQuery 检查 HTML DOM 中是否存在元素存在疑问。简而言之，如何以最简单的方式检查页面上是否存在元素？\n我们可以使用多种方法来实现此结果。其中之一是检查元素选择器的“length”属性是否返回大于 0 的数字。\n例如，如果我们有类似于下图所示的 HTML。\n1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;title\u0026gt;Lorem ipsum dolor\u0026lt;/title\u0026gt; 5 \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; 6\u0026lt;/head\u0026gt; 7\u0026lt;body\u0026gt; 8 \u0026lt;div id=\u0026#34;myDiv\u0026#34;\u0026gt;Lorem ipsum dolor sit amet.\u0026lt;/div\u0026gt; 9\u0026lt;/body\u0026gt; 10\u0026lt;/html\u0026gt; 我们要检查 DOM 中是否存在元素“myDiv”，即在页面上，我们可以使用以下代码。\n1if ($(\u0026#34;#myDiv\u0026#34;).length \u0026gt; 0) { 2 console.log(\u0026#34;The element exists!\u0026#34;); 3} 简化代码\r由于 JavaScript 中的许多事情要么是真要么是假，因此“length”属性的返回也可以被认为是真或假。返回是一个数字，0 代表“假”，其他都代表“真”。\n所以我们可以将代码简化如下。\n1if ($(\u0026#34;#myDiv\u0026#34;).length) { 2 console.log(\u0026#34;The element exists!\u0026#34;); 3} 即使删除比较“\u0026gt; 0”，返回值保持不变。\n为 jQuery 创建一个“exists”函数\r我们可以更进一步，添加一个名为“exists”的函数。这个函数可以直接与我们要检查的元素一起使用。\n1jQuery.fn.exists = function() { 2 return ( $(this).length \u0026gt; 0); 3} 4 5var elementExists = $(\u0026#34;#myDiv\u0026#34;).exists(); 6 7console.log(elementExists); 我们可以进一步改进并防止该方法代表链接的可能性。在这种情况下这是不可能的。我们将按如下方式进行。\n1jQuery.exists = function(selector) { 2 return ( $(selector).length \u0026gt; 0 ); 3} 4 5if ( $.exists(\u0026#34;#myDiv\u0026#34;) ) { 6 console.log(\u0026#34;The element exists!\u0026#34;); 7} 请注意，现在我们将选择器作为参数传递给“exists”函数，而不是直接从对象模拟链。\n使用数组检查 HTML 元素是否存在\r当我们在 jQuery 中使用选择器时，它会返回一个元素数组。如果我们尝试访问该数组的第一个元素并返回“未定义”，则表明该元素在 DOM 中不存在。\n1if ( $(\u0026#39;#myDiv\u0026#39;)[0] ) { 2 console.log(\u0026#34;The element exists!\u0026#34;); 3} 如您所见，有几种方法可以检查页面上是否存在 HTML 元素。哪个最好？嗯，解决你问题的那个。重要的是您的代码正在运行和工作。\n","date":"2022年03月03日","img":"","permalink":"https://w3source.org/zh-cn/articles/is-there-an-exists-function-for-jquery/","series":null,"tags":["JavaScript","jQuery"],"title":"jQuery中是否有“存在”功能？（HTML 元素存在吗？）"},{"categories":null,"content":"JavaScript 的hasOwnProperty方法用于检查给定对象是否具有特定属性。\nhasOwnProperty方法检查的属性是相关对象的内部属性，也就是说，它必须是由用户定义的。\n如果传递给hasOwnProperty的属性存在于对象上，则该方法返回true，否则返回false。\n示例 1：\n在这个例子中，我们创建了person对象并添加了name属性，然后我们使用hasOwnProperty来验证这个属性是我们对象的一部分。\n1var person = { 2 \u0026#34;name\u0026#34;: \u0026#34;Brian\u0026#34;, 3 \u0026#34;lastName\u0026#34;: \u0026#34;Scott\u0026#34; 4}; 5 6console.log( person.hasOwnProperty(\u0026#34;name\u0026#34;) ); 出口：\n1true 示例 2：\n在此示例中，我们将声明一个名为car的对象并为其分配一个名为 door 的属性，因此我们可以使用hasOwnProperty来检查此属性。\n1var car = { 2 \u0026#34;doors\u0026#34;: 4, 3 \u0026#34;engine\u0026#34;: 2.0, 4 \u0026#34;color\u0026#34;: \u0026#34;black\u0026#34; 5}; 6 7var hasDoor = car.hasOwnProperty(\u0026#34;doors\u0026#34;); 8 9console.log(hasDoor); 出口：\n1true 示例 3：\n在这里，我们将故意拼错对象的属性名称，以便hasOwnProperty方法返回false。\n1var shoppingCart = { 2 \u0026#34;fruits\u0026#34;: true, 3 \u0026#34;bread\u0026#34;: false 4}; 5 6var hasFruits = shoppingCart.hasOwnProperty(\u0026#34;fruites\u0026#34;); 7 8console.log(hasFruits); 出口：\n1false 为什么使用 hasOwnProperty 方法很重要？\r让我们看看在 JavaScript 中使用hasOwnProperty方法检查属性是否存在于对象中的重要性。\nJavaScript 中的一切都是对象。\r没错，在 JavaScript 中创建的任何元素都被视为对象。数字、文本字符串、数组和任何其他 JavaScript 数据类型都从父对象继承属性。\n示例 1：\nJavaScript 中的数值数据类型被视为对象。\n1var number = 10.22333; 2var otherNumber = number.toPrecision(3); 3 4console.log(otherNumber); 出口：\n110.2 示例 2：\n字符串数据类型也被视为对象。\n1var name = \u0026#34;Peter Max\u0026#34;; 2var char = name.charAt(2); 3 4console.log(char); 出口：\n1t 示例 3：\n甚至 JavaScript 中的数组也是对象。\n1var cars = [\u0026#34;BMW\u0026#34;, \u0026#34;Audi\u0026#34;, \u0026#34;Aston Martin\u0026#34;]; 2 3var carIndexNumber = cars.indexOf(\u0026#34;BMW\u0026#34;); 4 5console.log(carIndexNumber); 出口：\n10 在前面的示例中，所有对象都从主对象 Object 继承属性。\nJavaScript 中的“in”命令\r新的JavaScript 程序员通常使用in命令来检查给定对象上是否存在属性。\n例子：\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if (\u0026#34;engine\u0026#34; in car) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} 出口：\n1true 问题是in命令很全面。它将搜索对象的所有属性。用户创建的属性和从父对象继承的属性都包含在检查中。\n如果程序员碰巧只在对象属性存在的情况下运行一段代码，这可能会导致逻辑错误。\n但是程序员想要检查对象的默认属性？还是用户创建的属性？\n例子：\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if (\u0026#34;toString\u0026#34; in car) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} 出口：\n1true 在前面的例子中，命令in返回true，也就是说，它假设我们的对象中存在toString属性，即使我们没有声明这个属性。\ntoString属性/方法继承自父对象。为避免这种混淆，请始终使用hasOwnProperty方法。\n例子：\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if ( car.hasOwnProperty(\u0026#34;toString\u0026#34;) ) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} 出口：\n1false 现在返回值为false。这是因为，正如我们之前看到的，hasOwnProperty方法只搜索用户定义的属性。\n","date":"2022年02月25日","img":"","permalink":"https://w3source.org/zh-cn/articles/javascript-hasownproperty/","series":null,"tags":["JavaScript"],"title":"学习如何使用 JavaScript 的 hasOwnProperty 方法"}]