[{"categories":null,"content":"JavaScript 的hasOwnProperty方法用于检查给定对象是否具有特定属性。\nhasOwnProperty方法检查的属性是相关对象的内部属性，也就是说，它必须是由用户定义的。\n如果传递给hasOwnProperty的属性存在于对象上，则该方法返回true，否则返回false。\n示例 1：\n在这个例子中，我们创建了person对象并添加了name属性，然后我们使用hasOwnProperty来验证这个属性是我们对象的一部分。\n1var person = { 2 \u0026#34;name\u0026#34;: \u0026#34;Brian\u0026#34;, 3 \u0026#34;lastName\u0026#34;: \u0026#34;Scott\u0026#34; 4}; 5 6console.log( person.hasOwnProperty(\u0026#34;name\u0026#34;) ); 出口：\n1true 示例 2：\n在此示例中，我们将声明一个名为car的对象并为其分配一个名为 door 的属性，因此我们可以使用hasOwnProperty来检查此属性。\n1var car = { 2 \u0026#34;doors\u0026#34;: 4, 3 \u0026#34;engine\u0026#34;: 2.0, 4 \u0026#34;color\u0026#34;: \u0026#34;black\u0026#34; 5}; 6 7var hasDoor = car.hasOwnProperty(\u0026#34;doors\u0026#34;); 8 9console.log(hasDoor); 出口：\n1true 示例 3：\n在这里，我们将故意拼错对象的属性名称，以便hasOwnProperty方法返回false。\n1var shoppingCart = { 2 \u0026#34;fruits\u0026#34;: true, 3 \u0026#34;bread\u0026#34;: false 4}; 5 6var hasFruits = shoppingCart.hasOwnProperty(\u0026#34;fruites\u0026#34;); 7 8console.log(hasFruits); 出口：\n1false 为什么使用 hasOwnProperty 方法很重要？\r让我们看看在 JavaScript 中使用hasOwnProperty方法检查属性是否存在于对象中的重要性。\nJavaScript 中的一切都是对象。\r没错，在 JavaScript 中创建的任何元素都被视为对象。数字、文本字符串、数组和任何其他 JavaScript 数据类型都从父对象继承属性。\n示例 1：\nJavaScript 中的数值数据类型被视为对象。\n1var number = 10.22333; 2var otherNumber = number.toPrecision(3); 3 4console.log(otherNumber); 出口：\n110.2 示例 2：\n字符串数据类型也被视为对象。\n1var name = \u0026#34;Peter Max\u0026#34;; 2var char = name.charAt(2); 3 4console.log(char); 出口：\n1t 示例 3：\n甚至 JavaScript 中的数组也是对象。\n1var cars = [\u0026#34;BMW\u0026#34;, \u0026#34;Audi\u0026#34;, \u0026#34;Aston Martin\u0026#34;]; 2 3var carIndexNumber = cars.indexOf(\u0026#34;BMW\u0026#34;); 4 5console.log(carIndexNumber); 出口：\n10 在前面的示例中，所有对象都从主对象 Object 继承属性。\nJavaScript 中的“in”命令\r新的JavaScript 程序员通常使用in命令来检查给定对象上是否存在属性。\n例子：\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if (\u0026#34;engine\u0026#34; in car) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} 出口：\n1true 问题是in命令很全面。它将搜索对象的所有属性。用户创建的属性和从父对象继承的属性都包含在检查中。\n如果程序员碰巧只在对象属性存在的情况下运行一段代码，这可能会导致逻辑错误。\n但是程序员想要检查对象的默认属性？还是用户创建的属性？\n例子：\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if (\u0026#34;toString\u0026#34; in car) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} 出口：\n1true 在前面的例子中，命令in返回true，也就是说，它假设我们的对象中存在toString属性，即使我们没有声明这个属性。\ntoString属性/方法继承自父对象。为避免这种混淆，请始终使用hasOwnProperty方法。\n例子：\n1var car = { 2 \u0026#34;doors\u0026#34;: 2, 3 \u0026#34;engine\u0026#34;: 1.2, 4 \u0026#34;color\u0026#34;: \u0026#34;yellow\u0026#34; 5}; 6 7if ( car.hasOwnProperty(\u0026#34;toString\u0026#34;) ) { 8 console.log(\u0026#34;true\u0026#34;); 9} else { 10 console.log(\u0026#34;false\u0026#34;); 11} 出口：\n1false 现在返回值为false。这是因为，正如我们之前看到的，hasOwnProperty方法只搜索用户定义的属性。\n","date":"2022年02月25日","img":"","permalink":"/zh-cn/articles/javascript-hasownproperty/","series":null,"tags":["JavaScript"],"title":"学习如何使用 JavaScript 的 hasOwnProperty 方法"}]